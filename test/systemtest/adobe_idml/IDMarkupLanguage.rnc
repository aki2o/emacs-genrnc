datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"
namespace x="adobe:ns:meta/"

grammar {
start = Document_Object

include "datatype.rnc"

Document_Object = element Document {
  attribute DOMVersion { "6.0" },
  attribute Self { xsd:string },
  attribute TransparencyAttributeDefaultProperty { xsd:string }?,
  attribute StoryList { list { xsd:string * } }?,
  attribute FullName { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute Visible { xsd:boolean }?,
  attribute FilePath { xsd:string }?,
  attribute Modified { xsd:boolean }?,
  attribute Saved { xsd:boolean }?,
  attribute ZeroPoint { UnitPointType_TypeDef }?,
  attribute ActiveLayer { xsd:string }?,
  attribute Converted { xsd:boolean }?,
  attribute Recovered { xsd:boolean }?,
  attribute ReadOnly { xsd:boolean }?,
  attribute UnusedSwatches { list { xsd:string * } }?,
  attribute CMYKProfileList { list { xsd:string * } }?,
  attribute RGBProfileList { list { xsd:string * } }?,
  attribute CMYKProfile { xsd:string }?,
  attribute RGBProfile { xsd:string }?,
  attribute SolidColorIntent { RenderingIntent_EnumValue }?,
  attribute AfterBlendingIntent { RenderingIntent_EnumValue }?,
  attribute DefaultImageIntent { RenderingIntent_EnumValue }?,
  attribute RGBPolicy { ColorSettingsPolicy_EnumValue }?,
  attribute CMYKPolicy { ColorSettingsPolicy_EnumValue }?,
  attribute AccurateLABSpots { xsd:boolean }?,
  attribute ActiveProcess { xsd:string }?,
  element Properties {
    element InstanceList { element IndexInstanceType { IndexInstanceType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Language_Object*,
  Color_Object*,
  Ink_Object*,
  MixedInkGroup_Object*,
  MixedInk_Object*,
  PastedSmoothShade_Object*,
  Tint_Object*,
  Swatch_Object*,
  Gradient_Object*,
  (StrokeStyle_Object*&
  DashedStrokeStyle_Object*&
  DottedStrokeStyle_Object*&
  StripedStrokeStyle_Object*),
  FontFamily_Object*,
  CompositeFont_Object*,
  KinsokuTable_Object*,
  MojikumiTable_Object*,
  RootCharacterStyleGroup_Object?,
  NumberingList_Object*,
  RootParagraphStyleGroup_Object?,
  TOCStyle_Object*,
  RootCellStyleGroup_Object?,
  RootTableStyleGroup_Object?,
  NamedGrid_Object*,
  RootObjectStyleGroup_Object?,
  TrapPreset_Object*,
  Condition_Object*,
  ConditionSet_Object*,
  (XMLImportPreference_Object?&
  XMLExportPreference_Object?&
  XMLPreference_Object?&
  ExportForWebPreference_Object?&
  TransparencyPreference_Object?&
  TransparencyDefaultContainerObject_Object?&
  StoryPreference_Object?&
  TextFramePreference_Object?&
  TextPreference_Object?&
  TextDefault_Object?&
  DictionaryPreference_Object?&
  AnchoredObjectDefault_Object?&
  AnchoredObjectSetting_Object?&
  BaselineFrameGridOption_Object?&
  FootnoteOption_Object?&
  TextWrapPreference_Object?&
  DocumentPreference_Object?&
  GridPreference_Object?&
  GuidePreference_Object?&
  MarginPreference_Object?&
  PasteboardPreference_Object?&
  ViewPreference_Object?&
  PrintPreference_Object?&
  PrintBookletOption_Object?&
  PrintBookletPrintPreference_Object?&
  MetadataPacketPreference_Object?&
  IndexOptions_Object?&
  IndexHeaderSetting_Object?&
  PageItemDefault_Object?&
  FrameFittingOption_Object?&
  ButtonPreference_Object?&
  TinDocumentDataObject_Object?&
  ConditionalTextPreference_Object?&
  LayoutGridDataInformation_Object?&
  StoryGridDataInformation_Object?&
  CjkGridPreference_Object?&
  MojikumiUiPreference_Object?&
  ChapterNumberPreference_Object?&
  DataMerge_Object?&
  DataMergeOption_Object?&
  LayoutAdjustmentPreference_Object?),
  TextVariable_Object*,
  XMLTag_Object*,
  Layer_Object*,
  MasterSpread_Object*,
  Spread_Object*,
  Section_Object*,
  DocumentUser_Object*,
  CrossReferenceFormat_Object*,
  Index_Object*,
  XmlStory_Object*,
  Story_Object*,
  HyperlinkPageDestination_Object*,
  HyperlinkURLDestination_Object*,
  HyperlinkExternalPageDestination_Object*,
  HyperlinkPageItemSource_Object*,
  Hyperlink_Object*,
  XMLExportMap_Object*,
  XMLImportMap_Object*,
  Bookmark_Object*,
  (HyphenationException_Object*&
  IndexingSortOption_Object*&
  ABullet_Object*&
  Assignment_Object*&
  PreflightProfile_Object*&
  DataMergeImagePlaceholder_Object*),
  element x:xmpmeta { anything }?
)
}

Language_Object = element Language {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute SingleQuotes { xsd:string }?,
  attribute DoubleQuotes { xsd:string }?,
  attribute PrimaryLanguageName { xsd:string }?,
  attribute SublanguageName { xsd:string }?,
  attribute Id { xsd:int }?,
  attribute HyphenationVendor { xsd:string }?,
  attribute SpellingVendor { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Color_Object = element Color {
  attribute Self { xsd:string },
  attribute Model { ColorModel_EnumValue }?,
  attribute Space { ColorSpace_EnumValue }?,
  attribute ColorValue { list { xsd:double * } }?,
  attribute ColorOverride { ColorOverride_EnumValue }?,
  attribute BaseColor { xsd:string }?,
  attribute SpotInkAliasSpotColorReference { xsd:string }?,
  attribute AlternateSpace { ColorSpace_EnumValue }?,
  attribute AlternateColorValue { list { xsd:double * } }?,
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Ink_Object = element Ink {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute AliasInkName { xsd:string }?,
  attribute Angle { xsd:double {minInclusive="0" maxInclusive="360"} }?,
  attribute ConvertToProcess { xsd:boolean }?,
  attribute Frequency { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute NeutralDensity { xsd:double {minInclusive="0.001" maxInclusive="10"} }?,
  attribute PrintInk { xsd:boolean }?,
  attribute TrapOrder { xsd:int }?,
  attribute InkType { InkTypes_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MixedInkGroup_Object = element MixedInkGroup {
  attribute Self { xsd:string },
  attribute Model { ColorModel_EnumValue }?,
  attribute InkList { list { xsd:string * } }?,
  attribute InkNameList { list { xsd:string * } }?,
  attribute MixedInkSpotColorNameList { list { xsd:string * } }?,
  attribute MixedInkSpotColorList { list { xsd:string * } }?,
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MixedInk_Object = element MixedInk {
  attribute Self { xsd:string },
  attribute Model { ColorModel_EnumValue }?,
  attribute Space { ColorSpace_EnumValue }?,
  attribute InkList { list { xsd:string * } }?,
  attribute InkPercentages { list { xsd:double * } }?,
  attribute BaseColor { xsd:string }?,
  attribute InkNameList { list { xsd:string * } }?,
  attribute MixedInkSpotColorNameList { list { xsd:string * } }?,
  attribute MixedInkSpotColorList { list { xsd:string * } }?,
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

PastedSmoothShade_Object = element PastedSmoothShade {
  attribute Self { xsd:string },
  attribute ContentsVersion { xsd:int }?,
  attribute ContentsType { ContentsTypeSettings_EnumValue }?,
  attribute SpotColorList { list { xsd:string * } }?,
  attribute ContentsEncoding { EncodingType_EnumValue }?,
  attribute ContentsMatrix { TransformationMatrixType_TypeDef }?,
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Contents { text }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Tint_Object = element Tint {
  attribute Self { xsd:string },
  attribute TintValue { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute BaseColor { xsd:string },
  attribute Name { xsd:string },
  attribute ColorOverride { ColorOverride_EnumValue }?,
  attribute SpotInkAliasSpotColorReference { xsd:string }?,
  attribute AlternateSpace { ColorSpace_EnumValue }?,
  attribute AlternateColorValue { list { xsd:double * } }?,
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Swatch_Object = element Swatch {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Gradient_Object = element Gradient {
  attribute Self { xsd:string },
  attribute Type { GradientType_EnumValue }?,
  attribute Name { xsd:string },
  attribute ColorEditable { xsd:boolean }?,
  attribute ColorRemovable { xsd:boolean }?,
  attribute Visible { xsd:boolean }?,
  attribute SwatchCreatorID { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  GradientStop_Object*
)
}

GradientStop_Object = element GradientStop {
  attribute Self { xsd:string },
  attribute StopColor { xsd:string }?,
  attribute Location { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Midpoint { xsd:double {minInclusive="13" maxInclusive="87"} }?
}

StrokeStyle_Object = element StrokeStyle {
  attribute Self { xsd:string },
  attribute Name { xsd:string }
}

DashedStrokeStyle_Object = element DashedStrokeStyle {
  attribute Self { xsd:string },
  attribute DashArray { list { xsd:double * } }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute Name { xsd:string }
}

DottedStrokeStyle_Object = element DottedStrokeStyle {
  attribute Self { xsd:string },
  attribute DotArray { list { xsd:double * } }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute Name { xsd:string }
}

StripedStrokeStyle_Object = element StripedStrokeStyle {
  attribute Self { xsd:string },
  attribute StripeArray { list { xsd:double * } }?,
  attribute Name { xsd:string }
}

FontFamily_Object = element FontFamily {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
(
  Font_Object*
)
}

Font_Object = element Font {
  attribute Self { xsd:string },
  attribute FontFamily { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute PostScriptName { xsd:string }?,
  attribute Status { FontStatus_EnumValue }?,
  attribute FontStyleName { xsd:string }?,
  attribute FontType { FontTypes_EnumValue }?,
  attribute WritingScript { xsd:int }?,
  attribute FullName { xsd:string }?,
  attribute FullNameNative { xsd:string }?,
  attribute FontStyleNameNative { xsd:string }?,
  attribute PlatformName { xsd:string }?,
  attribute Version { xsd:string }?
}

CompositeFont_Object = element CompositeFont {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  CompositeFontEntry_Object*
)
}

CompositeFontEntry_Object = element CompositeFontEntry {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute FontStyle { xsd:string }?,
  attribute RelativeSize { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute CustomCharacters { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute ScaleOption { xsd:boolean }?,
  attribute BaselineShift { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

KinsokuTable_Object = element KinsokuTable {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute CantBeginLineChars { xsd:string }?,
  attribute CantEndLineChars { xsd:string }?,
  attribute HangingPunctuationChars { xsd:string }?,
  attribute CantBeSeparatedChars { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MojikumiTable_Object = element MojikumiTable {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute BasedOnMojikumiSet { MojikumiTableDefaults_EnumValue }?,
  element Properties {
    element OverrideMojikumiAkiList { element OverrideMojikumiAkiType { OverrideMojikumiAkiType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

RootCharacterStyleGroup_Object = element RootCharacterStyleGroup {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  CharacterStyle_Object*&
  CharacterStyleGroup_Object*
)
}

CharacterStyle_Object = element CharacterStyle {
  attribute Self { xsd:string },
  attribute Imported { xsd:boolean }?,
  attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
  attribute Name { xsd:string },
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  element Properties {
    element BasedOn { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element PreviewColor { 
      (InDesignUIColorType_TypeDef ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

CharacterStyleGroup_Object = element CharacterStyleGroup {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  CharacterStyle_Object*&
  CharacterStyleGroup_Object*
)
}

NumberingList_Object = element NumberingList {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute ContinueNumbersAcrossStories { xsd:boolean }?,
  attribute ContinueNumbersAcrossDocuments { xsd:boolean }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

RootParagraphStyleGroup_Object = element RootParagraphStyleGroup {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  ParagraphStyle_Object*&
  ParagraphStyleGroup_Object*
)
}

ParagraphStyle_Object = element ParagraphStyle {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute Imported { xsd:boolean }?,
  attribute NextStyle { xsd:string }?,
  attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BasedOn { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element PreviewColor { 
      (InDesignUIColorType_TypeDef ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ParagraphStyleGroup_Object = element ParagraphStyleGroup {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  ParagraphStyle_Object*&
  ParagraphStyleGroup_Object*
)
}

TOCStyle_Object = element TOCStyle {
  attribute Self { xsd:string },
  attribute TitleStyle { xsd:string }?,
  attribute Title { xsd:string }?,
  attribute Name { xsd:string },
  attribute RunIn { xsd:boolean }?,
  attribute IncludeHidden { xsd:boolean }?,
  attribute IncludeBookDocuments { xsd:boolean }?,
  attribute CreateBookmarks { xsd:boolean }?,
  attribute SetStoryDirection { HorizontalOrVertical_EnumValue }?,
  attribute NumberedParagraphs { NumberedParagraphsOptions_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TOCStyleEntry_Object*
)
}

TOCStyleEntry_Object = element TOCStyleEntry {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Level { xsd:short }?,
  attribute PageNumberPosition { PageNumberPosition_EnumValue }?,
  attribute Separator { xsd:string }?,
  attribute SortAlphabet { xsd:boolean }?,
  element Properties {
    element FormatStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element PageNumberStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element SeparatorStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

RootCellStyleGroup_Object = element RootCellStyleGroup {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  CellStyle_Object*&
  CellStyleGroup_Object*
)
}

CellStyle_Object = element CellStyle {
  attribute Self { xsd:string },
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute TopInset { xsd:double }?,
  attribute LeftInset { xsd:double }?,
  attribute BottomInset { xsd:double }?,
  attribute RightInset { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute TopLeftDiagonalLine { xsd:boolean }?,
  attribute TopRightDiagonalLine { xsd:boolean }?,
  attribute DiagonalLineInFront { xsd:boolean }?,
  attribute DiagonalLineStrokeWeight { xsd:double }?,
  attribute DiagonalLineStrokeType { xsd:string }?,
  attribute DiagonalLineStrokeColor { xsd:string }?,
  attribute DiagonalLineStrokeTint { xsd:double }?,
  attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
  attribute DiagonalLineStrokeGapColor { xsd:string }?,
  attribute DiagonalLineStrokeGapTint { xsd:double }?,
  attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
  attribute ClipContentToCell { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute ParagraphSpacingLimit { xsd:double }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute RotationAngle { xsd:double }?,
  attribute LeftEdgeStrokeWeight { xsd:double }?,
  attribute LeftEdgeStrokeType { xsd:string }?,
  attribute LeftEdgeStrokeColor { xsd:string }?,
  attribute LeftEdgeStrokeTint { xsd:double }?,
  attribute LeftEdgeStrokeOverprint { xsd:boolean }?,
  attribute LeftEdgeStrokeGapColor { xsd:string }?,
  attribute LeftEdgeStrokeGapTint { xsd:double }?,
  attribute LeftEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute TopEdgeStrokeWeight { xsd:double }?,
  attribute TopEdgeStrokeType { xsd:string }?,
  attribute TopEdgeStrokeColor { xsd:string }?,
  attribute TopEdgeStrokeTint { xsd:double }?,
  attribute TopEdgeStrokeOverprint { xsd:boolean }?,
  attribute TopEdgeStrokeGapColor { xsd:string }?,
  attribute TopEdgeStrokeGapTint { xsd:double }?,
  attribute TopEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute RightEdgeStrokeWeight { xsd:double }?,
  attribute RightEdgeStrokeType { xsd:string }?,
  attribute RightEdgeStrokeColor { xsd:string }?,
  attribute RightEdgeStrokeTint { xsd:double }?,
  attribute RightEdgeStrokeOverprint { xsd:boolean }?,
  attribute RightEdgeStrokeGapColor { xsd:string }?,
  attribute RightEdgeStrokeGapTint { xsd:double }?,
  attribute RightEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute BottomEdgeStrokeWeight { xsd:double }?,
  attribute BottomEdgeStrokeType { xsd:string }?,
  attribute BottomEdgeStrokeColor { xsd:string }?,
  attribute BottomEdgeStrokeTint { xsd:double }?,
  attribute BottomEdgeStrokeOverprint { xsd:boolean }?,
  attribute BottomEdgeStrokeGapColor { xsd:string }?,
  attribute BottomEdgeStrokeGapTint { xsd:double }?,
  attribute BottomEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
  attribute RotationRunsAgainstStory { xsd:boolean }?,
  attribute Name { xsd:string },
  element Properties {
    element BasedOn { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

CellStyleGroup_Object = element CellStyleGroup {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  CellStyle_Object*&
  CellStyleGroup_Object*
)
}

RootTableStyleGroup_Object = element RootTableStyleGroup {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TableStyle_Object*&
  TableStyleGroup_Object*
)
}

TableStyle_Object = element TableStyle {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute StrokeOrder { StrokeOrderTypes_EnumValue }?,
  attribute TopBorderStrokeWeight { xsd:double }?,
  attribute TopBorderStrokeType { xsd:string }?,
  attribute TopBorderStrokeColor { xsd:string }?,
  attribute TopBorderStrokeTint { xsd:double }?,
  attribute TopBorderStrokeOverprint { xsd:boolean }?,
  attribute TopBorderStrokeGapColor { xsd:string }?,
  attribute TopBorderStrokeGapTint { xsd:double }?,
  attribute TopBorderStrokeGapOverprint { xsd:boolean }?,
  attribute LeftBorderStrokeWeight { xsd:double }?,
  attribute LeftBorderStrokeType { xsd:string }?,
  attribute LeftBorderStrokeColor { xsd:string }?,
  attribute LeftBorderStrokeTint { xsd:double }?,
  attribute LeftBorderStrokeOverprint { xsd:boolean }?,
  attribute LeftBorderStrokeGapColor { xsd:string }?,
  attribute LeftBorderStrokeGapTint { xsd:double }?,
  attribute LeftBorderStrokeGapOverprint { xsd:boolean }?,
  attribute BottomBorderStrokeWeight { xsd:double }?,
  attribute BottomBorderStrokeType { xsd:string }?,
  attribute BottomBorderStrokeColor { xsd:string }?,
  attribute BottomBorderStrokeTint { xsd:double }?,
  attribute BottomBorderStrokeOverprint { xsd:boolean }?,
  attribute BottomBorderStrokeGapColor { xsd:string }?,
  attribute BottomBorderStrokeGapTint { xsd:double }?,
  attribute BottomBorderStrokeGapOverprint { xsd:boolean }?,
  attribute RightBorderStrokeWeight { xsd:double }?,
  attribute RightBorderStrokeType { xsd:string }?,
  attribute RightBorderStrokeColor { xsd:string }?,
  attribute RightBorderStrokeTint { xsd:double }?,
  attribute RightBorderStrokeOverprint { xsd:boolean }?,
  attribute RightBorderStrokeGapColor { xsd:string }?,
  attribute RightBorderStrokeGapTint { xsd:double }?,
  attribute RightBorderStrokeGapOverprint { xsd:boolean }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute SkipFirstAlternatingStrokeRows { xsd:int }?,
  attribute SkipLastAlternatingStrokeRows { xsd:int }?,
  attribute StartRowStrokeCount { xsd:int }?,
  attribute StartRowStrokeColor { xsd:string }?,
  attribute StartRowStrokeWeight { xsd:double }?,
  attribute StartRowStrokeType { xsd:string }?,
  attribute StartRowStrokeTint { xsd:double }?,
  attribute StartRowStrokeGapOverprint { xsd:boolean }?,
  attribute StartRowStrokeGapColor { xsd:string }?,
  attribute StartRowStrokeGapTint { xsd:double }?,
  attribute StartRowStrokeOverprint { xsd:boolean }?,
  attribute EndRowStrokeCount { xsd:int }?,
  attribute EndRowStrokeColor { xsd:string }?,
  attribute EndRowStrokeWeight { xsd:double }?,
  attribute EndRowStrokeType { xsd:string }?,
  attribute EndRowStrokeTint { xsd:double }?,
  attribute EndRowStrokeOverprint { xsd:boolean }?,
  attribute EndRowStrokeGapColor { xsd:string }?,
  attribute EndRowStrokeGapTint { xsd:double }?,
  attribute EndRowStrokeGapOverprint { xsd:boolean }?,
  attribute SkipFirstAlternatingStrokeColumns { xsd:int }?,
  attribute SkipLastAlternatingStrokeColumns { xsd:int }?,
  attribute StartColumnStrokeCount { xsd:int }?,
  attribute StartColumnStrokeColor { xsd:string }?,
  attribute StartColumnStrokeWeight { xsd:double }?,
  attribute StartColumnStrokeType { xsd:string }?,
  attribute StartColumnStrokeTint { xsd:double }?,
  attribute StartColumnStrokeOverprint { xsd:boolean }?,
  attribute StartColumnStrokeGapColor { xsd:string }?,
  attribute StartColumnStrokeGapTint { xsd:double }?,
  attribute StartColumnStrokeGapOverprint { xsd:boolean }?,
  attribute EndColumnStrokeCount { xsd:int }?,
  attribute EndColumnStrokeColor { xsd:string }?,
  attribute EndColumnStrokeWeight { xsd:double }?,
  attribute EndColumnLineStyle { xsd:string }?,
  attribute EndColumnStrokeTint { xsd:double }?,
  attribute EndColumnStrokeOverprint { xsd:boolean }?,
  attribute EndColumnStrokeGapColor { xsd:string }?,
  attribute EndColumnStrokeGapTint { xsd:double }?,
  attribute EndColumnStrokeGapOverprint { xsd:boolean }?,
  attribute ColumnFillsPriority { xsd:boolean }?,
  attribute SkipFirstAlternatingFillRows { xsd:int }?,
  attribute SkipLastAlternatingFillRows { xsd:int }?,
  attribute StartRowFillColor { xsd:string }?,
  attribute StartRowFillCount { xsd:int }?,
  attribute StartRowFillTint { xsd:double }?,
  attribute StartRowFillOverprint { xsd:boolean }?,
  attribute EndRowFillCount { xsd:int }?,
  attribute EndRowFillColor { xsd:string }?,
  attribute EndRowFillTint { xsd:double }?,
  attribute EndRowFillOverprint { xsd:boolean }?,
  attribute SkipFirstAlternatingFillColumns { xsd:int }?,
  attribute SkipLastAlternatingFillColumns { xsd:int }?,
  attribute StartColumnFillCount { xsd:int }?,
  attribute StartColumnFillColor { xsd:string }?,
  attribute StartColumnFillTint { xsd:double }?,
  attribute StartColumnFillOverprint { xsd:boolean }?,
  attribute EndColumnFillCount { xsd:int }?,
  attribute EndColumnFillColor { xsd:string }?,
  attribute EndColumnFillTint { xsd:double }?,
  attribute EndColumnFillOverprint { xsd:boolean }?,
  attribute HeaderRegionSameAsBodyRegion { xsd:boolean }?,
  attribute FooterRegionSameAsBodyRegion { xsd:boolean }?,
  attribute LeftColumnRegionSameAsBodyRegion { xsd:boolean }?,
  attribute RightColumnRegionSameAsBodyRegion { xsd:boolean }?,
  attribute HeaderRegionCellStyle { xsd:string }?,
  attribute FooterRegionCellStyle { xsd:string }?,
  attribute LeftColumnRegionCellStyle { xsd:string }?,
  attribute RightColumnRegionCellStyle { xsd:string }?,
  attribute BodyRegionCellStyle { xsd:string }?,
  attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
  element Properties {
    element BasedOn { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

TableStyleGroup_Object = element TableStyleGroup {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TableStyle_Object*&
  TableStyleGroup_Object*
)
}

NamedGrid_Object = element NamedGrid {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  GridDataInformation_Object?
)
}

GridDataInformation_Object = element GridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute LineAlignment { LineAlignment_EnumValue }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute GridView { GridViewSettings_EnumValue }?,
  attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
  attribute CharacterCountSize { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

RootObjectStyleGroup_Object = element RootObjectStyleGroup {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  ObjectStyleGroup_Object*&
  ObjectStyle_Object*
)
}

ObjectStyleGroup_Object = element ObjectStyleGroup {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  ObjectStyle_Object*&
  ObjectStyleGroup_Object*
)
}

ObjectStyle_Object = element ObjectStyle {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute ApplyNextParagraphStyle { xsd:boolean }?,
  attribute EnableFill { xsd:boolean }?,
  attribute EnableStroke { xsd:boolean }?,
  attribute EnableParagraphStyle { xsd:boolean }?,
  attribute EnableTextFrameGeneralOptions { xsd:boolean }?,
  attribute EnableTextFrameBaselineOptions { xsd:boolean }?,
  attribute EnableStoryOptions { xsd:boolean }?,
  attribute EnableTextWrapAndOthers { xsd:boolean }?,
  attribute EnableAnchoredObjectOptions { xsd:boolean }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute AppliedNamedGrid { xsd:string }?,
  attribute KeyboardShortcut { list { xsd:short ,xsd:short } }?,
  attribute EnableFrameFittingOptions { xsd:boolean }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute EnableStrokeAndCornerOptions { xsd:boolean }?,
  element Properties {
    element BasedOn { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextFramePreference_Object?&
  BaselineFrameGridOption_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  StoryPreference_Object?&
  FrameFittingOption_Object?&
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  ObjectStyleObjectEffectsCategorySettings_Object?&
  ObjectStyleStrokeEffectsCategorySettings_Object?&
  ObjectStyleFillEffectsCategorySettings_Object?&
  ObjectStyleContentEffectsCategorySettings_Object?
)
}

TransparencySetting_Object = element TransparencySetting {
(
  BlendingSetting_Object?&
  FindChangeBlendingSetting_Object?&
  DropShadowSetting_Object?&
  FindChangeDropShadowSetting_Object?&
  FeatherSetting_Object?&
  FindChangeFeatherSetting_Object?&
  InnerShadowSetting_Object?&
  FindChangeInnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  FindChangeOuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  FindChangeInnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  FindChangeBevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  FindChangeSatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  FindChangeDirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?&
  FindChangeGradientFeatherSetting_Object?
)
}

BlendingSetting_Object = element BlendingSetting {
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute KnockoutGroup { xsd:boolean }?,
  attribute IsolateBlending { xsd:boolean }?
}

FindChangeBlendingSetting_Object = element FindChangeBlendingSetting {
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KnockoutGroup { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element IsolateBlending { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

DropShadowSetting_Object = element DropShadowSetting {
  attribute Mode { ShadowMode_EnumValue }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute KnockedOut { xsd:boolean }?,
  attribute HonorOtherEffects { xsd:boolean }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?
}

FindChangeDropShadowSetting_Object = element FindChangeDropShadowSetting {
  attribute Mode { (ShadowMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element XOffset { 
      (unit_type, xsd:double {minInclusive="-1000" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element YOffset { 
      (unit_type, xsd:double {minInclusive="-1000" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element EffectColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Spread { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element UseGlobalLight { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KnockedOut { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element HonorOtherEffects { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Distance { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

FeatherSetting_Object = element FeatherSetting {
  attribute Mode { FeatherMode_EnumValue }?,
  attribute Width { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute CornerType { FeatherCornerType_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

FindChangeFeatherSetting_Object = element FindChangeFeatherSetting {
  attribute Mode { (FeatherMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute CornerType { (FeatherCornerType_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Width { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element ChokeAmount { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

InnerShadowSetting_Object = element InnerShadowSetting {
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute XOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?,
  attribute YOffset { xsd:double {minInclusive="-1000" maxInclusive="1000"} }?
}

FindChangeInnerShadowSetting_Object = element FindChangeInnerShadowSetting {
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element EffectColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Distance { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element UseGlobalLight { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element ChokeAmount { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element XOffset { 
      (unit_type, xsd:double {minInclusive="-1000" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element YOffset { 
      (unit_type, xsd:double {minInclusive="-1000" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

OuterGlowSetting_Object = element OuterGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?
}

FindChangeOuterGlowSetting_Object = element FindChangeOuterGlowSetting {
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute Technique { (GlowTechnique_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element EffectColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Spread { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

InnerGlowSetting_Object = element InnerGlowSetting {
  attribute Applied { xsd:boolean }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute EffectColor { xsd:string }?,
  attribute Technique { GlowTechnique_EnumValue }?,
  attribute Spread { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Source { InnerGlowSource_EnumValue }?
}

FindChangeInnerGlowSetting_Object = element FindChangeInnerGlowSetting {
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute Technique { (GlowTechnique_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute Source { (InnerGlowSource_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element EffectColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Spread { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

BevelAndEmbossSetting_Object = element BevelAndEmbossSetting {
  attribute Applied { xsd:boolean }?,
  attribute Style { BevelAndEmbossStyle_EnumValue }?,
  attribute Technique { BevelAndEmbossTechnique_EnumValue }?,
  attribute Depth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Direction { BevelAndEmbossDirection_EnumValue }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Soften { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Altitude { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute UseGlobalLight { xsd:boolean }?,
  attribute HighlightColor { xsd:string }?,
  attribute HighlightBlendMode { BlendMode_EnumValue }?,
  attribute HighlightOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ShadowColor { xsd:string }?,
  attribute ShadowBlendMode { BlendMode_EnumValue }?,
  attribute ShadowOpacity { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

FindChangeBevelAndEmbossSetting_Object = element FindChangeBevelAndEmbossSetting {
  attribute Style { (BevelAndEmbossStyle_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute Technique { (BevelAndEmbossTechnique_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute Direction { (BevelAndEmbossDirection_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute HighlightBlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  attribute ShadowBlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Depth { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Soften { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Altitude { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element UseGlobalLight { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element HighlightColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element HighlightOpacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element ShadowColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element ShadowOpacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

SatinSetting_Object = element SatinSetting {
  attribute Applied { xsd:boolean }?,
  attribute EffectColor { xsd:string }?,
  attribute BlendMode { BlendMode_EnumValue }?,
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Distance { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute Size { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute InvertEffect { xsd:boolean }?
}

FindChangeSatinSetting_Object = element FindChangeSatinSetting {
  attribute BlendMode { (BlendMode_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element EffectColor { 
      (object_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Opacity { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Distance { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Size { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="144"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element InvertEffect { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

DirectionalFeatherSetting_Object = element DirectionalFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute LeftWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute RightWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute TopWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute BottomWidth { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute ChokeAmount { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute FollowShapeMode { FollowShapeModeOptions_EnumValue }?,
  attribute Noise { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

FindChangeDirectionalFeatherSetting_Object = element FindChangeDirectionalFeatherSetting {
  attribute FollowShapeMode { (FollowShapeModeOptions_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element LeftWidth { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RightWidth { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element TopWidth { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element BottomWidth { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="1000"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element ChokeAmount { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Noise { 
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
}

GradientFeatherSetting_Object = element GradientFeatherSetting {
  attribute Applied { xsd:boolean }?,
  attribute Type { GradientType_EnumValue }?,
  attribute Angle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute Length { xsd:double }?,
  attribute GradientStart { UnitPointType_TypeDef }?,
  attribute HiliteAngle { xsd:double }?,
  attribute HiliteLength { xsd:double }?,
(
  OpacityGradientStop_Object*
)
}

OpacityGradientStop_Object = element OpacityGradientStop {
  attribute Self { xsd:string },
  attribute Opacity { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Location { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute Midpoint { xsd:double {minInclusive="13" maxInclusive="87"} }?
}

FindChangeGradientFeatherSetting_Object = element FindChangeGradientFeatherSetting {
  attribute Type { (GradientType_EnumValue ) |
    (NothingEnum_EnumValue )
  }?,
  element Properties {
    element Applied { 
      (bool_type, xsd:boolean ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Angle { 
      (double_type, xsd:double {minInclusive="-180" maxInclusive="180"} ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Length { 
      (unit_type, xsd:double ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element GradientStart { 
      (list_type, 
      element ListItem { unit_type, xsd:double },
      element ListItem { unit_type, xsd:double }) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element HiliteAngle { 
      (double_type, xsd:double ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element HiliteLength { 
      (unit_type, xsd:double ) |
      (enum_type, NothingEnum_EnumValue )
    }?
  }
  ?
  ,
(
  OpacityGradientStop_Object*
)
}

StrokeTransparencySetting_Object = element StrokeTransparencySetting {
(
  BlendingSetting_Object?&
  FindChangeBlendingSetting_Object?&
  DropShadowSetting_Object?&
  FindChangeDropShadowSetting_Object?&
  FeatherSetting_Object?&
  FindChangeFeatherSetting_Object?&
  InnerShadowSetting_Object?&
  FindChangeInnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  FindChangeOuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  FindChangeInnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  FindChangeBevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  FindChangeSatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  FindChangeDirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?&
  FindChangeGradientFeatherSetting_Object?
)
}

FillTransparencySetting_Object = element FillTransparencySetting {
(
  BlendingSetting_Object?&
  FindChangeBlendingSetting_Object?&
  DropShadowSetting_Object?&
  FindChangeDropShadowSetting_Object?&
  FeatherSetting_Object?&
  FindChangeFeatherSetting_Object?&
  InnerShadowSetting_Object?&
  FindChangeInnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  FindChangeOuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  FindChangeInnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  FindChangeBevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  FindChangeSatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  FindChangeDirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?&
  FindChangeGradientFeatherSetting_Object?
)
}

ContentTransparencySetting_Object = element ContentTransparencySetting {
(
  BlendingSetting_Object?&
  FindChangeBlendingSetting_Object?&
  DropShadowSetting_Object?&
  FindChangeDropShadowSetting_Object?&
  FeatherSetting_Object?&
  FindChangeFeatherSetting_Object?&
  InnerShadowSetting_Object?&
  FindChangeInnerShadowSetting_Object?&
  OuterGlowSetting_Object?&
  FindChangeOuterGlowSetting_Object?&
  InnerGlowSetting_Object?&
  FindChangeInnerGlowSetting_Object?&
  BevelAndEmbossSetting_Object?&
  FindChangeBevelAndEmbossSetting_Object?&
  SatinSetting_Object?&
  FindChangeSatinSetting_Object?&
  DirectionalFeatherSetting_Object?&
  FindChangeDirectionalFeatherSetting_Object?&
  GradientFeatherSetting_Object?&
  FindChangeGradientFeatherSetting_Object?
)
}

ObjectStyleObjectEffectsCategorySettings_Object = element ObjectStyleObjectEffectsCategorySettings {
  attribute EnableTransparency { xsd:boolean }?,
  attribute EnableDropShadow { xsd:boolean }?,
  attribute EnableFeather { xsd:boolean }?,
  attribute EnableInnerShadow { xsd:boolean }?,
  attribute EnableOuterGlow { xsd:boolean }?,
  attribute EnableInnerGlow { xsd:boolean }?,
  attribute EnableBevelEmboss { xsd:boolean }?,
  attribute EnableSatin { xsd:boolean }?,
  attribute EnableDirectionalFeather { xsd:boolean }?,
  attribute EnableGradientFeather { xsd:boolean }?
}

ObjectStyleStrokeEffectsCategorySettings_Object = element ObjectStyleStrokeEffectsCategorySettings {
  attribute EnableTransparency { xsd:boolean }?,
  attribute EnableDropShadow { xsd:boolean }?,
  attribute EnableFeather { xsd:boolean }?,
  attribute EnableInnerShadow { xsd:boolean }?,
  attribute EnableOuterGlow { xsd:boolean }?,
  attribute EnableInnerGlow { xsd:boolean }?,
  attribute EnableBevelEmboss { xsd:boolean }?,
  attribute EnableSatin { xsd:boolean }?,
  attribute EnableDirectionalFeather { xsd:boolean }?,
  attribute EnableGradientFeather { xsd:boolean }?
}

ObjectStyleFillEffectsCategorySettings_Object = element ObjectStyleFillEffectsCategorySettings {
  attribute EnableTransparency { xsd:boolean }?,
  attribute EnableDropShadow { xsd:boolean }?,
  attribute EnableFeather { xsd:boolean }?,
  attribute EnableInnerShadow { xsd:boolean }?,
  attribute EnableOuterGlow { xsd:boolean }?,
  attribute EnableInnerGlow { xsd:boolean }?,
  attribute EnableBevelEmboss { xsd:boolean }?,
  attribute EnableSatin { xsd:boolean }?,
  attribute EnableDirectionalFeather { xsd:boolean }?,
  attribute EnableGradientFeather { xsd:boolean }?
}

ObjectStyleContentEffectsCategorySettings_Object = element ObjectStyleContentEffectsCategorySettings {
  attribute EnableTransparency { xsd:boolean }?,
  attribute EnableDropShadow { xsd:boolean }?,
  attribute EnableFeather { xsd:boolean }?,
  attribute EnableInnerShadow { xsd:boolean }?,
  attribute EnableOuterGlow { xsd:boolean }?,
  attribute EnableInnerGlow { xsd:boolean }?,
  attribute EnableBevelEmboss { xsd:boolean }?,
  attribute EnableSatin { xsd:boolean }?,
  attribute EnableDirectionalFeather { xsd:boolean }?,
  attribute EnableGradientFeather { xsd:boolean }?
}

TrapPreset_Object = element TrapPreset {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute DefaultTrapWidth { xsd:double {minInclusive="0" maxInclusive="8"} }?,
  attribute BlackWidth { xsd:double {minInclusive="0" maxInclusive="8"} }?,
  attribute TrapJoin { EndJoin_EnumValue }?,
  attribute TrapEnd { TrapEndTypes_EnumValue }?,
  attribute ObjectsToImages { xsd:boolean }?,
  attribute ImagesToImages { xsd:boolean }?,
  attribute InternalImages { xsd:boolean }?,
  attribute OneBitImages { xsd:boolean }?,
  attribute ImagePlacement { TrapImagePlacementTypes_EnumValue }?,
  attribute StepThreshold { xsd:double {minInclusive="1" maxInclusive="100"} }?,
  attribute BlackColorThreshold { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute BlackDensity { xsd:double {minInclusive="0" maxInclusive="10"} }?,
  attribute SlidingTrapThreshold { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ColorReduction { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Condition_Object = element Condition {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute IndicatorMethod { ConditionIndicatorMethod_EnumValue }?,
  attribute UnderlineIndicatorAppearance { ConditionUnderlineIndicatorAppearance_EnumValue }?,
  attribute Visible { xsd:boolean }?,
  element Properties {
    element IndicatorColor { InDesignUIColorType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ConditionSet_Object = element ConditionSet {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element SetConditions { element VisibilityPair { VisibilityPair_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

XMLImportPreference_Object = element XMLImportPreference {
  attribute ImportToSelected { xsd:boolean }?,
  attribute ImportStyle { XMLImportStyles_EnumValue }?,
  attribute CreateLinkToXML { xsd:boolean }?,
  attribute RepeatTextElements { xsd:boolean }?,
  attribute IgnoreUnmatchedIncoming { xsd:boolean }?,
  attribute ImportTextIntoTables { xsd:boolean }?,
  attribute IgnoreWhitespace { xsd:boolean }?,
  attribute RemoveUnmatchedExisting { xsd:boolean }?,
  attribute AllowTransform { xsd:boolean }?,
  attribute ImportCALSTables { xsd:boolean }?,
  element Properties {
    element TransformFilename { 
      (file_type, xsd:string ) |
      (enum_type, XMLTransformFile_EnumValue )
    }?&
    element TransformParameters { element NameValuePair { NameValuePair_TypeDef }* 
    }?
  }
  ?
}

XMLExportPreference_Object = element XMLExportPreference {
  attribute ViewAfterExport { xsd:boolean }?,
  attribute ExportFromSelected { xsd:boolean }?,
  attribute FileEncoding { XMLFileEncoding_EnumValue }?,
  attribute Ruby { xsd:boolean }?,
  attribute ExcludeDtd { xsd:boolean }?,
  attribute CopyOriginalImages { xsd:boolean }?,
  attribute CopyOptimizedImages { xsd:boolean }?,
  attribute CopyFormattedImages { xsd:boolean }?,
  attribute ImageConversion { ImageConversion_EnumValue }?,
  attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
  attribute GIFOptionsInterlaced { xsd:boolean }?,
  attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
  attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?,
  attribute AllowTransform { xsd:boolean }?,
  attribute CharacterReferences { xsd:boolean }?,
  attribute ExportUntaggedTablesFormat { XMLExportUntaggedTablesFormat_EnumValue }?,
  element Properties {
    element PreferredBrowser { 
      (file_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element TransformFilename { 
      (file_type, xsd:string ) |
      (enum_type, XMLTransformFile_EnumValue )
    }?
  }
  ?
}

XMLPreference_Object = element XMLPreference {
  attribute DefaultStoryTagName { xsd:string }?,
  attribute DefaultTableTagName { xsd:string }?,
  attribute DefaultCellTagName { xsd:string }?,
  attribute DefaultImageTagName { xsd:string }?,
  element Properties {
    element DefaultStoryTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultTableTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultCellTagColor { InDesignUIColorType_TypeDef }?&
    element DefaultImageTagColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

ExportForWebPreference_Object = element ExportForWebPreference {
  attribute CopyFormattedImages { xsd:boolean }?,
  attribute CopyOptimizedImages { xsd:boolean }?,
  attribute CopyOriginalImages { xsd:boolean }?,
  attribute ImageConversion { ImageConversion_EnumValue }?,
  attribute GIFOptionsPalette { GIFOptionsPalette_EnumValue }?,
  attribute GIFOptionsInterlaced { xsd:boolean }?,
  attribute JPEGOptionsQuality { JPEGOptionsQuality_EnumValue }?,
  attribute JPEGOptionsFormat { JPEGOptionsFormat_EnumValue }?
}

TransparencyPreference_Object = element TransparencyPreference {
  attribute BlendingSpace { BlendingSpace_EnumValue }?,
  attribute GlobalLightAngle { xsd:double {minInclusive="-180" maxInclusive="180"} }?,
  attribute GlobalLightAltitude { xsd:double {minInclusive="0" maxInclusive="100"} }?
}

TransparencyDefaultContainerObject_Object = element TransparencyDefaultContainerObject {
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?
)
}

StoryPreference_Object = element StoryPreference {
  attribute OpticalMarginAlignment { xsd:boolean }?,
  attribute OpticalMarginSize { xsd:double {minInclusive="0.1" maxInclusive="1296"} }?,
  attribute FrameType { FrameTypes_EnumValue }?,
  attribute StoryOrientation { StoryHorizontalOrVertical_EnumValue }?,
  attribute StoryDirection { StoryDirectionOptions_EnumValue }?
}

TextFramePreference_Object = element TextFramePreference {
  attribute TextColumnCount { xsd:int {minInclusive="1" maxInclusive="40"} }?,
  attribute TextColumnGutter { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute TextColumnFixedWidth { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute UseFixedColumnWidth { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute VerticalThreshold { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute IgnoreWrap { xsd:boolean }?,
  element Properties {
    element InsetSpacing { 
      (unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} ) |
      (list_type, 
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} },
      element ListItem { unit_type, xsd:double {minInclusive="0" maxInclusive="8640"} })
    }?
  }
  ?
}

TextPreference_Object = element TextPreference {
  attribute TypographersQuotes { xsd:boolean }?,
  attribute HighlightHjViolations { xsd:boolean }?,
  attribute HighlightKeeps { xsd:boolean }?,
  attribute HighlightSubstitutedGlyphs { xsd:boolean }?,
  attribute HighlightCustomSpacing { xsd:boolean }?,
  attribute HighlightSubstitutedFonts { xsd:boolean }?,
  attribute UseOpticalSize { xsd:boolean }?,
  attribute UseParagraphLeading { xsd:boolean }?,
  attribute SuperscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute SuperscriptPosition { xsd:double {minInclusive="-500" maxInclusive="500"} }?,
  attribute SubscriptSize { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute SubscriptPosition { xsd:double {minInclusive="-500" maxInclusive="500"} }?,
  attribute SmallCap { xsd:double {minInclusive="1" maxInclusive="200"} }?,
  attribute LeadingKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="200"} }?,
  attribute BaselineShiftKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="200"} }?,
  attribute KerningKeyIncrement { xsd:double {minInclusive="1" maxInclusive="100"} }?,
  attribute ShowInvisibles { xsd:boolean }?,
  attribute JustifyTextWraps { xsd:boolean }?,
  attribute AbutTextToTextWrap { xsd:boolean }?,
  attribute ZOrderTextWrap { xsd:boolean }?,
  attribute LinkTextFilesWhenImporting { xsd:boolean }?,
  attribute HighlightKinsoku { xsd:boolean }?,
  attribute UseNewVerticalScaling { xsd:boolean }?,
  attribute UseCidMojikumi { xsd:boolean }?,
  attribute EnableStylePreviewMode { xsd:boolean }?,
  attribute SmartTextReflow { xsd:boolean }?,
  attribute AddPages { AddPageOptions_EnumValue }?,
  attribute LimitToMasterTextFrames { xsd:boolean }?,
  attribute PreserveFacingPageSpreads { xsd:boolean }?,
  attribute DeleteEmptyPages { xsd:boolean }?
}

TextDefault_Object = element TextDefault {
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute AppliedNamedGrid { xsd:string }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?
  }
  ?
}

DictionaryPreference_Object = element DictionaryPreference {
  attribute Composition { ComposeUsing_EnumValue }?,
  attribute MergeUserDictionary { xsd:boolean }?,
  attribute RecomposeWhenChanged { xsd:boolean }?
}

AnchoredObjectDefault_Object = element AnchoredObjectDefault {
  attribute AnchorContent { ContentType_EnumValue }?,
  attribute InitialAnchorHeight { xsd:double }?,
  attribute InitialAnchorWidth { xsd:double }?,
  attribute AnchoredParagraphStyle { xsd:string }?,
  attribute AnchoredObjectStyle { xsd:string }?
}

AnchoredObjectSetting_Object = element AnchoredObjectSetting {
  attribute AnchoredPosition { AnchorPosition_EnumValue }?,
  attribute SpineRelative { xsd:boolean }?,
  attribute LockPosition { xsd:boolean }?,
  attribute PinPosition { xsd:boolean }?,
  attribute AnchorPoint { AnchorPoint_EnumValue }?,
  attribute HorizontalAlignment { HorizontalAlignment_EnumValue }?,
  attribute HorizontalReferencePoint { AnchoredRelativeTo_EnumValue }?,
  attribute VerticalAlignment { VerticalAlignment_EnumValue }?,
  attribute VerticalReferencePoint { VerticallyRelativeTo_EnumValue }?,
  attribute AnchorXoffset { xsd:double }?,
  attribute AnchorYoffset { xsd:double }?,
  attribute AnchorSpaceAbove { xsd:double }?
}

BaselineFrameGridOption_Object = element BaselineFrameGridOption {
  attribute UseCustomBaselineFrameGrid { xsd:boolean }?,
  attribute StartingOffsetForBaselineFrameGrid { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute BaselineFrameGridRelativeOption { BaselineFrameGridRelativeOption_EnumValue }?,
  attribute BaselineFrameGridIncrement { xsd:double {minInclusive="1" maxInclusive="8640"} }?,
  element Properties {
    element BaselineFrameGridColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

FootnoteOption_Object = element FootnoteOption {
  attribute StartAt { xsd:int {minInclusive="1" maxInclusive="100000"} }?,
  attribute Prefix { xsd:string }?,
  attribute Suffix { xsd:string }?,
  attribute FootnoteTextStyle { xsd:string }?,
  attribute FootnoteMarkerStyle { xsd:string }?,
  attribute SeparatorText { xsd:string }?,
  attribute SpaceBetween { xsd:double {minInclusive="0" maxInclusive="864"} }?,
  attribute Spacer { xsd:double {minInclusive="0" maxInclusive="864"} }?,
  attribute FootnoteFirstBaselineOffset { FootnoteFirstBaseline_EnumValue }?,
  attribute FootnoteMinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute EosPlacement { xsd:boolean }?,
  attribute NoSplitting { xsd:boolean }?,
  attribute RuleOn { xsd:boolean }?,
  attribute RuleLineWeight { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute RuleTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute RuleGapTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute RuleGapOverprint { xsd:boolean }?,
  attribute RuleOverprint { xsd:boolean }?,
  attribute RuleLeftIndent { xsd:double {minInclusive="-103680" maxInclusive="103680"} }?,
  attribute RuleWidth { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute RuleOffset { xsd:double {minInclusive="-15552" maxInclusive="15552"} }?,
  attribute ContinuingRuleOn { xsd:boolean }?,
  attribute ContinuingRuleLineWeight { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute ContinuingRuleTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ContinuingRuleGapTint { xsd:double {minInclusive="0" maxInclusive="100"} }?,
  attribute ContinuingRuleOverprint { xsd:boolean }?,
  attribute ContinuingRuleGapOverprint { xsd:boolean }?,
  attribute ContinuingRuleLeftIndent { xsd:double {minInclusive="-103680" maxInclusive="103680"} }?,
  attribute ContinuingRuleWidth { xsd:double {minInclusive="0" maxInclusive="103680"} }?,
  attribute ContinuingRuleOffset { xsd:double {minInclusive="-15552" maxInclusive="15552"} }?,
  element Properties {
    element FootnoteNumberingStyle { 
      (enum_type, FootnoteNumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element RestartNumbering { 
      (enum_type, FootnoteRestarting_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element ShowPrefixSuffix { 
      (enum_type, FootnotePrefixSuffix_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element MarkerPositioning { 
      (enum_type, FootnoteMarkerPositioning_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element RuleType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element ContinuingRuleGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

TextWrapPreference_Object = element TextWrapPreference {
  attribute Inverse { xsd:boolean }?,
  attribute ApplyToMasterPageOnly { xsd:boolean }?,
  attribute TextWrapSide { TextWrapSideOptions_EnumValue }?,
  attribute TextWrapMode { TextWrapModes_EnumValue }?,
  element Properties {
    element TextWrapOffset { UnitRectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?
  }
  ?
  ,
(
  ContourOption_Object?
)
}

ContourOption_Object = element ContourOption {
  attribute ContourType { ContourOptionsTypes_EnumValue }?,
  attribute IncludeInsideEdges { xsd:boolean }?,
  attribute ContourPathName { xsd:string }?
}

DocumentPreference_Object = element DocumentPreference {
  attribute PageHeight { xsd:double }?,
  attribute PageWidth { xsd:double }?,
  attribute PagesPerDocument { xsd:int }?,
  attribute FacingPages { xsd:boolean }?,
  attribute DocumentBleedTopOffset { xsd:double }?,
  attribute DocumentBleedBottomOffset { xsd:double }?,
  attribute DocumentBleedInsideOrLeftOffset { xsd:double }?,
  attribute DocumentBleedOutsideOrRightOffset { xsd:double }?,
  attribute DocumentBleedUniformSize { xsd:boolean }?,
  attribute SlugTopOffset { xsd:double }?,
  attribute SlugBottomOffset { xsd:double }?,
  attribute SlugInsideOrLeftOffset { xsd:double }?,
  attribute SlugRightOrOutsideOffset { xsd:double }?,
  attribute DocumentSlugUniformSize { xsd:boolean }?,
  attribute PreserveLayoutWhenShuffling { xsd:boolean }?,
  attribute AllowPageShuffle { xsd:boolean }?,
  attribute OverprintBlack { xsd:boolean }?,
  attribute PageBinding { PageBindingOptions_EnumValue }?,
  attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
  attribute ColumnGuideLocked { xsd:boolean }?,
  attribute MasterTextFrame { xsd:boolean }?,
  attribute SnippetImportUsesOriginalLocation { xsd:boolean }?,
  element Properties {
    element ColumnGuideColor { InDesignUIColorType_TypeDef }?&
    element MarginGuideColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

GridPreference_Object = element GridPreference {
  attribute DocumentGridShown { xsd:boolean }?,
  attribute DocumentGridSnapto { xsd:boolean }?,
  attribute HorizontalGridlineDivision { xsd:double {minInclusive="0.01" maxInclusive="1000"} }?,
  attribute VerticalGridlineDivision { xsd:double {minInclusive="0.01" maxInclusive="1000"} }?,
  attribute HorizontalGridSubdivision { xsd:int {minInclusive="1" maxInclusive="1000"} }?,
  attribute VerticalGridSubdivision { xsd:int {minInclusive="1" maxInclusive="1000"} }?,
  attribute GridsInBack { xsd:boolean }?,
  attribute BaselineGridShown { xsd:boolean }?,
  attribute BaselineStart { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute BaselineDivision { xsd:double {minInclusive="1" maxInclusive="8640"} }?,
  attribute BaselineViewThreshold { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute BaselineGridRelativeOption { BaselineGridRelativeOption_EnumValue }?,
  element Properties {
    element GridColor { InDesignUIColorType_TypeDef }?&
    element BaselineColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

GuidePreference_Object = element GuidePreference {
  attribute GuidesInBack { xsd:boolean }?,
  attribute GuidesShown { xsd:boolean }?,
  attribute GuidesLocked { xsd:boolean }?,
  attribute GuidesSnapto { xsd:boolean }?,
  attribute RulerGuidesViewThreshold { xsd:double }?,
  element Properties {
    element RulerGuidesColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

MarginPreference_Object = element MarginPreference {
  attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="216"} }?,
  attribute ColumnGutter { xsd:double {minInclusive="0" maxInclusive="1440"} }?,
  attribute Top { xsd:double }?,
  attribute Bottom { xsd:double }?,
  attribute Left { xsd:double }?,
  attribute Right { xsd:double }?,
  attribute ColumnDirection { HorizontalOrVertical_EnumValue }?,
  attribute ColumnsPositions { list { xsd:double * } }?
}

PasteboardPreference_Object = element PasteboardPreference {
  attribute MinimumSpaceAboveAndBelow { xsd:double }?,
  element Properties {
    element PreviewBackgroundColor { InDesignUIColorType_TypeDef }?&
    element BleedGuideColor { InDesignUIColorType_TypeDef }?&
    element SlugGuideColor { InDesignUIColorType_TypeDef }?
  }
  ?
}

ViewPreference_Object = element ViewPreference {
  attribute GuideSnaptoZone { xsd:int {minInclusive="1" maxInclusive="36"} }?,
  attribute CursorKeyIncrement { xsd:double {minInclusive="0.001" maxInclusive="100"} }?,
  attribute HorizontalMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute VerticalMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute RulerOrigin { RulerOrigin_EnumValue }?,
  attribute ShowRulers { xsd:boolean }?,
  attribute ShowFrameEdges { xsd:boolean }?,
  attribute TypographicMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute TextSizeMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute PrintDialogMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute LineMeasurementUnits { MeasurementUnits_EnumValue }?,
  attribute PointsPerInch { xsd:double {minInclusive="60" maxInclusive="80"} }?,
  attribute HorizontalCustomPoints { xsd:double {minInclusive="4" maxInclusive="256"} }?,
  attribute VerticalCustomPoints { xsd:double {minInclusive="4" maxInclusive="256"} }?,
  attribute ShowNotes { xsd:boolean }?
}

PrintPreference_Object = element PrintPreference {
  attribute PrintFile { xsd:string }?,
  attribute Copies { xsd:int }?,
  attribute Collating { xsd:boolean }?,
  attribute ReverseOrder { xsd:boolean }?,
  attribute Sequence { Sequences_EnumValue }?,
  attribute PrintSpreads { xsd:boolean }?,
  attribute PrintMasterPages { xsd:boolean }?,
  attribute PrintNonprinting { xsd:boolean }?,
  attribute PrintBlankPages { xsd:boolean }?,
  attribute PrintGuidesGrids { xsd:boolean }?,
  attribute PaperOffset { xsd:double }?,
  attribute PaperGap { xsd:double }?,
  attribute PaperTransverse { xsd:boolean }?,
  attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
  attribute PagePosition { PagePositions_EnumValue }?,
  attribute ScaleMode { ScaleModes_EnumValue }?,
  attribute ScaleWidth { xsd:double }?,
  attribute ScaleHeight { xsd:double }?,
  attribute ScaleProportional { xsd:boolean }?,
  attribute Thumbnails { xsd:boolean }?,
  attribute ThumbnailsPerPage { ThumbsPerPage_EnumValue }?,
  attribute Tile { xsd:boolean }?,
  attribute TilingType { TilingTypes_EnumValue }?,
  attribute TilingOverlap { xsd:double }?,
  attribute AllPrinterMarks { xsd:boolean }?,
  attribute CropMarks { xsd:boolean }?,
  attribute BleedMarks { xsd:boolean }?,
  attribute RegistrationMarks { xsd:boolean }?,
  attribute ColorBars { xsd:boolean }?,
  attribute PageInformationMarks { xsd:boolean }?,
  attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
  attribute MarkOffset { xsd:double }?,
  attribute UseDocumentBleedToPrint { xsd:boolean }?,
  attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute IncludeSlugToPrint { xsd:boolean }?,
  attribute ColorOutput { ColorOutputModes_EnumValue }?,
  attribute TextAsBlack { xsd:boolean }?,
  attribute Trapping { Trapping_EnumValue }?,
  attribute Flip { Flip_EnumValue }?,
  attribute Negative { xsd:boolean }?,
  attribute CompositeAngle { xsd:double }?,
  attribute CompositeFrequency { xsd:double }?,
  attribute SimulateOverprint { xsd:boolean }?,
  attribute PrintCyan { xsd:boolean }?,
  attribute CyanAngle { xsd:double }?,
  attribute CyanFrequency { xsd:double }?,
  attribute PrintMagenta { xsd:boolean }?,
  attribute MagentaAngle { xsd:double }?,
  attribute MagentaFrequency { xsd:double }?,
  attribute PrintYellow { xsd:boolean }?,
  attribute YellowAngle { xsd:double }?,
  attribute YellowFrequency { xsd:double }?,
  attribute PrintBlack { xsd:boolean }?,
  attribute BlackAngle { xsd:double }?,
  attribute BlackFrequency { xsd:double }?,
  attribute SendImageData { ImageDataTypes_EnumValue }?,
  attribute FontDownloading { FontDownloading_EnumValue }?,
  attribute DownloadPPDFonts { xsd:boolean }?,
  attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
  attribute DataFormat { DataFormat_EnumValue }?,
  attribute SourceSpace { SourceSpaces_EnumValue }?,
  attribute Intent { RenderingIntent_EnumValue }?,
  attribute OPIImageReplacement { xsd:boolean }?,
  attribute OmitEPS { xsd:boolean }?,
  attribute OmitPDF { xsd:boolean }?,
  attribute OmitBitmaps { xsd:boolean }?,
  attribute FlattenerPresetName { xsd:string }?,
  attribute IgnoreSpreadOverrides { xsd:boolean }?,
  attribute DeviceType { xsd:int }?,
  attribute PrintTo { xsd:int }?,
  attribute PPDFile { xsd:string }?,
  attribute PrintToDisk { xsd:boolean }?,
  attribute PrintRecord { xsd:string }?,
  attribute PrintResolution { xsd:double }?,
  attribute PaperSizeSelector { xsd:string }?,
  attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
  attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
  attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
  attribute SeparationScreening { xsd:string }?,
  attribute CompositeScreening { xsd:string }?,
  attribute SpotAngle { xsd:double }?,
  attribute SpotFrequency { xsd:double }?,
  attribute BleedChain { xsd:boolean }?,
  attribute PreserveColorNumbers { xsd:boolean }?,
  attribute BitmapPrinting { xsd:boolean }?,
  attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
  attribute PrintLayers { PrintLayerOptions_EnumValue }?,
  element Properties {
    element Printer { 
      (enum_type, Printer_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PPD { 
      (enum_type, PPDValues_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSize { 
      (enum_type, PaperSizes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperHeight { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element PaperWidth { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element MarkType { 
      (enum_type, MarkTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Screening { 
      (enum_type, Screeening_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element CRD { 
      (enum_type, ColorRenderingDictionary_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PageRange { 
      (enum_type, PageRange_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSizeRect { RectangleBoundsType_TypeDef }?&
    element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?&
    element ActivePrinterPreset { 
      (enum_type, PrinterPresetTypes_EnumValue ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

PrintBookletOption_Object = element PrintBookletOption {
  attribute BookletType { BookletTypeOptions_EnumValue }?,
  attribute SpaceBetweenPages { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute BleedBetweenPages { xsd:double {minInclusive="0" maxInclusive="144"} }?,
  attribute Creep { xsd:double {minInclusive="-144" maxInclusive="144"} }?,
  attribute SignatureSize { SignatureSizeOptions_EnumValue }?,
  attribute TopMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute BottomMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute LeftMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute RightMargin { xsd:double {minInclusive="0" maxInclusive="288"} }?,
  attribute AutoAdjustMargins { xsd:boolean }?,
  attribute MarginsUniformSize { xsd:boolean }?,
  attribute PrintBlankPrinterSpreads { xsd:boolean }?,
  element Properties {
    element PageRange { 
      (enum_type, PageRange_EnumValue ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

PrintBookletPrintPreference_Object = element PrintBookletPrintPreference {
  attribute PrinterList { list { xsd:string * } }?,
  attribute PPDList { list { xsd:string * } }?,
  attribute PaperSizeList { list { xsd:string * } }?,
  attribute ScreeningList { list { xsd:string * } }?,
  attribute PrintFile { xsd:string }?,
  attribute Copies { xsd:int }?,
  attribute Collating { xsd:boolean }?,
  attribute ReverseOrder { xsd:boolean }?,
  attribute PrintNonprinting { xsd:boolean }?,
  attribute PrintBlankPages { xsd:boolean }?,
  attribute PrintGuidesGrids { xsd:boolean }?,
  attribute PaperOffset { xsd:double }?,
  attribute PaperGap { xsd:double }?,
  attribute PaperTransverse { xsd:boolean }?,
  attribute PrintPageOrientation { PrintPageOrientation_EnumValue }?,
  attribute PagePosition { PagePositions_EnumValue }?,
  attribute ScaleMode { ScaleModes_EnumValue }?,
  attribute ScaleWidth { xsd:double }?,
  attribute ScaleHeight { xsd:double }?,
  attribute ScaleProportional { xsd:boolean }?,
  attribute PrintLayers { PrintLayerOptions_EnumValue }?,
  attribute AllPrinterMarks { xsd:boolean }?,
  attribute CropMarks { xsd:boolean }?,
  attribute BleedMarks { xsd:boolean }?,
  attribute RegistrationMarks { xsd:boolean }?,
  attribute ColorBars { xsd:boolean }?,
  attribute PageInformationMarks { xsd:boolean }?,
  attribute MarkLineWeight { MarkLineWeight_EnumValue }?,
  attribute MarkOffset { xsd:double }?,
  attribute UseDocumentBleedToPrint { xsd:boolean }?,
  attribute BleedTop { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedBottom { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedInside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedOutside { xsd:double {minInclusive="0" maxInclusive="432"} }?,
  attribute BleedChain { xsd:boolean }?,
  attribute ColorOutput { ColorOutputModes_EnumValue }?,
  attribute TextAsBlack { xsd:boolean }?,
  attribute Trapping { Trapping_EnumValue }?,
  attribute Flip { Flip_EnumValue }?,
  attribute Negative { xsd:boolean }?,
  attribute CompositeAngle { xsd:double }?,
  attribute CompositeFrequency { xsd:double }?,
  attribute SimulateOverprint { xsd:boolean }?,
  attribute PrintCyan { xsd:boolean }?,
  attribute CyanAngle { xsd:double }?,
  attribute CyanFrequency { xsd:double }?,
  attribute PrintMagenta { xsd:boolean }?,
  attribute MagentaAngle { xsd:double }?,
  attribute MagentaFrequency { xsd:double }?,
  attribute PrintYellow { xsd:boolean }?,
  attribute YellowAngle { xsd:double }?,
  attribute YellowFrequency { xsd:double }?,
  attribute PrintBlack { xsd:boolean }?,
  attribute BlackAngle { xsd:double }?,
  attribute BlackFrequency { xsd:double }?,
  attribute SendImageData { ImageDataTypes_EnumValue }?,
  attribute FontDownloading { FontDownloading_EnumValue }?,
  attribute DownloadPPDFonts { xsd:boolean }?,
  attribute PostScriptLevel { PostScriptLevels_EnumValue }?,
  attribute DataFormat { DataFormat_EnumValue }?,
  attribute SourceSpace { SourceSpaces_EnumValue }?,
  attribute Intent { RenderingIntent_EnumValue }?,
  attribute PreserveColorNumbers { xsd:boolean }?,
  attribute OPIImageReplacement { xsd:boolean }?,
  attribute OmitEPS { xsd:boolean }?,
  attribute OmitPDF { xsd:boolean }?,
  attribute OmitBitmaps { xsd:boolean }?,
  attribute FlattenerPresetName { xsd:string }?,
  attribute IgnoreSpreadOverrides { xsd:boolean }?,
  attribute BitmapPrinting { xsd:boolean }?,
  attribute BitmapResolution { xsd:int {minInclusive="72" maxInclusive="1200"} }?,
  attribute DeviceType { xsd:int }?,
  attribute PrintTo { xsd:int }?,
  attribute PPDFile { xsd:string }?,
  attribute PrintToDisk { xsd:boolean }?,
  attribute PrintRecord { xsd:string }?,
  attribute PrintResolution { xsd:double }?,
  attribute PaperSizeSelector { xsd:string }?,
  attribute PaperHeightRange { list { xsd:double ,xsd:double } }?,
  attribute PaperWidthRange { list { xsd:double ,xsd:double } }?,
  attribute PaperOffsetRange { list { xsd:double ,xsd:double } }?,
  attribute SeparationScreening { xsd:string }?,
  attribute CompositeScreening { xsd:string }?,
  attribute SpotAngle { xsd:double }?,
  attribute SpotFrequency { xsd:double }?,
  element Properties {
    element Printer { 
      (enum_type, Printer_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PPD { 
      (enum_type, PPDValues_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSize { 
      (enum_type, PaperSizes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperHeight { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element PaperWidth { 
      (enum_type, PaperSize_EnumValue ) |
      (unit_type, xsd:double )
    }?&
    element MarkType { 
      (enum_type, MarkTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Screening { 
      (enum_type, Screeening_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element CRD { 
      (enum_type, ColorRenderingDictionary_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element ActivePrinterPreset { 
      (enum_type, PrinterPresetTypes_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element PaperSizeRect { RectangleBoundsType_TypeDef }?&
    element ImageablePaperSizeRect { RectangleBoundsType_TypeDef }?
  }
  ?
}

MetadataPacketPreference_Object = element MetadataPacketPreference {
  element Properties {
    element Contents { xsd:string }?
  }
  ?
}

IndexOptions_Object = element IndexOptions {
  attribute Title { xsd:string }?,
  attribute TitleStyle { xsd:string }?,
  attribute ReplaceExistingIndex { xsd:boolean }?,
  attribute IncludeBookDocuments { xsd:boolean }?,
  attribute IncludeHiddenEntries { xsd:boolean }?,
  attribute IndexFormat { IndexFormat_EnumValue }?,
  attribute IncludeSectionHeadings { xsd:boolean }?,
  attribute IncludeEmptyIndexSections { xsd:boolean }?,
  attribute Level1Style { xsd:string }?,
  attribute Level2Style { xsd:string }?,
  attribute Level3Style { xsd:string }?,
  attribute Level4Style { xsd:string }?,
  attribute SectionHeadingStyle { xsd:string }?,
  attribute PageNumberStyle { xsd:string }?,
  attribute CrossReferenceStyle { xsd:string }?,
  attribute CrossReferenceTopicStyle { xsd:string }?,
  attribute FollowingTopicSeparator { xsd:string }?,
  attribute BetweenEntriesSeparator { xsd:string }?,
  attribute PageRangeSeparator { xsd:string }?,
  attribute BetweenPageNumbersSeparator { xsd:string }?,
  attribute BeforeCrossReferenceSeparator { xsd:string }?,
  attribute EntryEndSeparator { xsd:string }?
}

IndexHeaderSetting_Object = element IndexHeaderSetting {
  attribute HeaderSetName { xsd:string }?,
  attribute HeaderSetLanguage { xsd:int }?,
  attribute IndexHeaderSetHandler { xsd:int }?,
  attribute IndexHeaderSetGroupValue { xsd:int }?,
  attribute IndexHeaderSetGroupOptionValue { xsd:int }?,
  element Properties {
    element ListOfIndexHeaderGroup { element IndexHeaderGroupType { IndexHeaderGroupType_TypeDef }* 
    }?
  }
  ?
}

PageItemDefault_Object = element PageItemDefault {
  attribute AppliedGraphicObjectStyle { xsd:string }?,
  attribute AppliedTextObjectStyle { xsd:string }?,
  attribute AppliedGridObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?
)
}

FrameFittingOption_Object = element FrameFittingOption {
  attribute LeftCrop { xsd:double }?,
  attribute TopCrop { xsd:double }?,
  attribute RightCrop { xsd:double }?,
  attribute BottomCrop { xsd:double }?,
  attribute FittingOnEmptyFrame { EmptyFrameFittingOptions_EnumValue }?,
  attribute FittingAlignment { AnchorPoint_EnumValue }?
}

ButtonPreference_Object = element ButtonPreference {
  attribute Name { xsd:string }?
}

TinDocumentDataObject_Object = element TinDocumentDataObject {
  element Properties {
    element GaijiRefMaps { text }?
  }
  ?
}

ConditionalTextPreference_Object = element ConditionalTextPreference {
  attribute ShowConditionIndicators { ConditionIndicatorMode_EnumValue }?,
  attribute ActiveConditionSet { xsd:string }?
}

LayoutGridDataInformation_Object = element LayoutGridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

StoryGridDataInformation_Object = element StoryGridDataInformation {
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute CharacterAki { xsd:double }?,
  attribute LineAki { xsd:double }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute LineAlignment { LineAlignment_EnumValue }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute GridView { GridViewSettings_EnumValue }?,
  attribute CharacterCountLocation { CharacterCountLocation_EnumValue }?,
  attribute CharacterCountSize { xsd:double }?,
  element Properties {
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

CjkGridPreference_Object = element CjkGridPreference {
  attribute ShowAllLayoutGrids { xsd:boolean }?,
  attribute ShowAllFrameGrids { xsd:boolean }?,
  attribute MinimumScale { xsd:double }?,
  attribute SnapToLayoutGrid { xsd:boolean }?,
  attribute ColorEveryNthCell { xsd:short }?,
  attribute SingleLineColorMode { xsd:boolean }?,
  attribute ICFMode { xsd:boolean }?,
  attribute UseCircularCells { xsd:boolean }?,
  attribute ShowCharacterCount { xsd:boolean }?,
  element Properties {
    element LayoutGridColorIndex { InDesignUIColorType_TypeDef }?
  }
  ?
}

MojikumiUiPreference_Object = element MojikumiUiPreference {
  attribute MojikumiUiSettings { xsd:short }?
}

ChapterNumberPreference_Object = element ChapterNumberPreference {
  attribute ChapterNumber { xsd:int }?,
  attribute ChapterNumberSource { ChapterNumberSources_EnumValue }?,
  element Properties {
    element ChapterNumberFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?
  }
  ?
}

DataMerge_Object = element DataMerge {
  attribute DataSourceFileType { DataSourceType_EnumValue }?,
  attribute DataSourceFile { xsd:string }?,
(
  DataMergeField_Object*
)
}

DataMergeField_Object = element DataMergeField {
  attribute Self { xsd:string },
  attribute FieldName { xsd:string }?
}

DataMergeOption_Object = element DataMergeOption {
  attribute FittingOption { Fitting_EnumValue }?,
  attribute CenterImage { xsd:boolean }?,
  attribute LinkImages { xsd:boolean }?,
  attribute RemoveBlankLines { xsd:boolean }?,
  attribute CreateNewDocument { xsd:boolean }?,
  attribute DocumentSize { xsd:int }?
}

LayoutAdjustmentPreference_Object = element LayoutAdjustmentPreference {
  attribute EnableLayoutAdjustment { xsd:boolean }?,
  attribute SnapZone { xsd:double {minInclusive="0" maxInclusive="12"} }?,
  attribute AllowGraphicsToResize { xsd:boolean }?,
  attribute AllowRulerGuidesToMove { xsd:boolean }?,
  attribute IgnoreRulerGuideAlignments { xsd:boolean }?,
  attribute IgnoreObjectOrLayerLocks { xsd:boolean }?
}

TextVariable_Object = element TextVariable {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute VariableType { VariableTypes_EnumValue }?,
(
  CustomTextVariablePreference_Object?&
  FileNameVariablePreference_Object?&
  PageNumberVariablePreference_Object?&
  ChapterNumberVariablePreference_Object?&
  DateVariablePreference_Object?&
  MatchCharacterStylePreference_Object?&
  MatchParagraphStylePreference_Object?
)
}

CustomTextVariablePreference_Object = element CustomTextVariablePreference {
  element Properties {
    element Contents { 
      (string_type, xsd:string ) |
      (enum_type, SpecialCharacters_EnumValue ) |
      (object_type, xsd:string )
    }?
  }
  ?
}

FileNameVariablePreference_Object = element FileNameVariablePreference {
  attribute TextBefore { xsd:string }?,
  attribute IncludePath { xsd:boolean }?,
  attribute IncludeExtension { xsd:boolean }?,
  attribute TextAfter { xsd:string }?
}

PageNumberVariablePreference_Object = element PageNumberVariablePreference {
  attribute TextBefore { xsd:string }?,
  attribute Format { VariableNumberingStyles_EnumValue }?,
  attribute TextAfter { xsd:string }?,
  attribute Scope { VariableScopes_EnumValue }?
}

ChapterNumberVariablePreference_Object = element ChapterNumberVariablePreference {
  attribute TextBefore { xsd:string }?,
  attribute Format { VariableNumberingStyles_EnumValue }?,
  attribute TextAfter { xsd:string }?
}

DateVariablePreference_Object = element DateVariablePreference {
  attribute TextBefore { xsd:string }?,
  attribute Format { xsd:string }?,
  attribute TextAfter { xsd:string }?
}

MatchCharacterStylePreference_Object = element MatchCharacterStylePreference {
  attribute TextBefore { xsd:string }?,
  attribute TextAfter { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute SearchStrategy { SearchStrategies_EnumValue }?,
  attribute ChangeCase { ChangeCaseOptions_EnumValue }?,
  attribute DeleteEndPunctuation { xsd:boolean }?
}

MatchParagraphStylePreference_Object = element MatchParagraphStylePreference {
  attribute TextBefore { xsd:string }?,
  attribute TextAfter { xsd:string }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute SearchStrategy { SearchStrategies_EnumValue }?,
  attribute ChangeCase { ChangeCaseOptions_EnumValue }?,
  attribute DeleteEndPunctuation { xsd:boolean }?
}

XMLTag_Object = element XMLTag {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  element Properties {
    element TagColor { InDesignUIColorType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Layer_Object = element Layer {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Visible { xsd:boolean }?,
  attribute Locked { xsd:boolean }?,
  attribute IgnoreWrap { xsd:boolean }?,
  attribute ShowGuides { xsd:boolean }?,
  attribute LockGuides { xsd:boolean }?,
  attribute UI { xsd:boolean }?,
  attribute Expendable { xsd:boolean }?,
  attribute Printable { xsd:boolean }?,
  element Properties {
    element LayerColor { InDesignUIColorType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MasterSpread_Object = element MasterSpread {
  attribute Self { xsd:string },
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute Name { xsd:string }?,
  attribute NamePrefix { xsd:string }?,
  attribute BaseName { xsd:string }?,
  attribute ShowMasterItems { xsd:boolean }?,
  attribute PageCount { xsd:int }?,
  attribute OverriddenPageItemProps { list { xsd:int * } }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Page_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*
)
}

Page_Object = element Page {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute AppliedTrapPreset { xsd:string }?,
  attribute AppliedMaster { xsd:string }?,
  attribute OverrideList { list { xsd:string * } }?,
  attribute TabOrder { list { xsd:string * } }?,
  attribute GridStartingPoint { GridStartingPointOptions_EnumValue }?,
  attribute UseMasterGrid { xsd:boolean }?,
  element Properties {
    element Descriptor { list_type, element ListItem { 
        (string_type, xsd:string ) |
        (enum_type, PageNumberStyle_EnumValue ) |
        (bool_type, xsd:boolean ) |
        (long_type, xsd:int {minInclusive="1" maxInclusive="999999"} )
      }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  MarginPreference_Object?&
  Guide_Object*&
  GridDataInformation_Object?
)
}

Guide_Object = element Guide {
  attribute Self { xsd:string },
  attribute Orientation { HorizontalOrVertical_EnumValue }?,
  attribute Location { xsd:double }?,
  attribute FitToPage { xsd:boolean }?,
  attribute ViewThreshold { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute Locked { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute PageIndex { xsd:short }?,
  element Properties {
    element GuideColor { InDesignUIColorType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Oval_Object = element Oval {
  attribute Self { xsd:string },
  attribute StoryTitle { xsd:string }?,
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?),
  (Sound_Object*&
  Movie_Object*&
  Link_Object*&
  FormField_Object*&
  Button_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  ImportedPage_Object*)
)
}

TextPath_Object = element TextPath {
  attribute Self { xsd:string },
  attribute ParentStory { xsd:string }?,
  attribute PathAlignment { PathTypeAlignments_EnumValue }?,
  attribute TextAlignment { TextTypeAlignments_EnumValue }?,
  attribute PathEffect { TextPathEffects_EnumValue }?,
  attribute FlipPathEffect { FlipValues_EnumValue }?,
  attribute PathSpacing { xsd:int }?,
  attribute StartBracket { xsd:double }?,
  attribute EndBracket { xsd:double }?,
  attribute PreviousTextFrame { xsd:string }?,
  attribute NextTextFrame { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

InCopyExportOption_Object = element InCopyExportOption {
  attribute IncludeGraphicProxies { xsd:boolean }?,
  attribute IncludeAllResources { xsd:boolean }?
}

Sound_Object = element Sound {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute PlayOnPageTurn { xsd:boolean }?,
  attribute DoNotPrintPoster { xsd:boolean }?,
  attribute EmbedInPDF { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute FilePath { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Image_Object*&
  Link_Object*
)
}

Movie_Object = element Movie {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute FloatingWindowPosition { FloatingWindowPosition_EnumValue }?,
  attribute FloatingWindowSize { FloatingWindowSize_EnumValue }?,
  attribute PlayMode { PlayMode_EnumValue }?,
  attribute PlayOnPageTurn { xsd:boolean }?,
  attribute ShowControls { xsd:boolean }?,
  attribute FloatingWindow { xsd:boolean }?,
  attribute URL { xsd:string }?,
  attribute EmbedInPDF { xsd:boolean }?,
  attribute CustomPoster { xsd:boolean }?,
  attribute IntrinsicBounds { list { xsd:int ,xsd:int } }?,
  attribute CanChoosePosters { xsd:boolean }?,
  attribute PosterAvailable { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute FilePath { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Image_Object*&
  Link_Object*
)
}

Link_Object = element Link {
  attribute Self { xsd:string },
  attribute AssetURL { xsd:string }?,
  attribute AssetID { xsd:string }?,
  attribute LinkResourceURI { xsd:string },
  attribute LinkResourceFormat { xsd:string }?,
  attribute StoredState { LinkResourceStoreState_EnumValue }?,
  attribute LinkClassID { xsd:int }?,
  attribute LinkClientID { xsd:int }?,
  attribute LinkResourceModified { xsd:boolean }?,
  attribute LinkObjectModified { xsd:boolean }?,
  attribute ShowInUI { xsd:boolean }?,
  attribute CanEmbed { xsd:boolean }?,
  attribute CanUnembed { xsd:boolean }?,
  attribute CanPackage { xsd:boolean }?,
  attribute ImportPolicy { LinkImportPolicy_EnumValue }?,
  attribute ExportPolicy { LinkExportPolicy_EnumValue }?,
  attribute LinkImportStamp { xsd:string }?,
  attribute LinkImportModificationTime { xsd:dateTime }?,
  attribute LinkImportTime { xsd:dateTime }?,
  attribute LinkExportTime { xsd:dateTime }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Link_Object1*
)
}

Link_Object1 = element Link {
  attribute Self { xsd:string },
  attribute AssetURL { xsd:string }?,
  attribute AssetID { xsd:string }?,
  attribute LinkResourceURI { xsd:string }?,
  attribute LinkResourceFormat { xsd:string }?,
  attribute StoredState { LinkResourceStoreState_EnumValue }?,
  attribute LinkClassID { xsd:int }?,
  attribute LinkClientID { xsd:int }?,
  attribute LinkResourceModified { xsd:boolean }?,
  attribute LinkObjectModified { xsd:boolean }?,
  attribute ShowInUI { xsd:boolean }?,
  attribute CanEmbed { xsd:boolean }?,
  attribute CanUnembed { xsd:boolean }?,
  attribute CanPackage { xsd:boolean }?,
  attribute ImportPolicy { LinkImportPolicy_EnumValue }?,
  attribute ExportPolicy { LinkExportPolicy_EnumValue }?,
  attribute LinkImportStamp { xsd:string }?,
  attribute LinkImportModificationTime { xsd:dateTime }?,
  attribute LinkImportTime { xsd:dateTime }?,
  attribute LinkExportTime { xsd:dateTime }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Link_Object1*
)
}

Graphic_Object = element Graphic {
  attribute Self { xsd:string },
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  MetadataPacketPreference_Object?
)
}

Image_Object = element Image {
  attribute Self { xsd:string },
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute Space { xsd:string }?,
  attribute ActualPpi { list { xsd:double ,xsd:double } }?,
  attribute EffectivePpi { list { xsd:double ,xsd:double } }?,
  attribute ImageRenderingIntent { RenderingIntent_EnumValue }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Profile { 
      (enum_type, Profile_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  ImageIOPreference_Object?&
  GraphicLayerOption_Object?&
  LayerCompOption_Object?
)
}

ClippingPathSettings_Object = element ClippingPathSettings {
  attribute ClippingType { ClippingPathType_EnumValue }?,
  attribute InvertPath { xsd:boolean }?,
  attribute IncludeInsideEdges { xsd:boolean }?,
  attribute RestrictToFrame { xsd:boolean }?,
  attribute UseHighResolutionImage { xsd:boolean }?,
  attribute Threshold { xsd:int {minInclusive="0" maxInclusive="255"} }?,
  attribute Tolerance { xsd:double {minInclusive="0" maxInclusive="10"} }?,
  attribute InsetFrame { xsd:double }?,
  attribute AppliedPathName { xsd:string }?,
  attribute Index { xsd:int }?
}

ImageIOPreference_Object = element ImageIOPreference {
  attribute ApplyPhotoshopClippingPath { xsd:boolean }?,
  attribute AllowAutoEmbedding { xsd:boolean }?,
  attribute AlphaChannelName { xsd:string }?
}

GraphicLayerOption_Object = element GraphicLayerOption {
  attribute UpdateLinkOption { UpdateLinkOptions_EnumValue }?,
(
  GraphicLayer_Object*
)
}

GraphicLayer_Object = element GraphicLayer {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute OriginalVisibility { xsd:boolean }?,
  attribute CurrentVisibility { xsd:boolean }?,
  attribute SeparatorLayer { xsd:boolean }?,
  attribute AdjustmentLayer { xsd:boolean }?,
  attribute FXLayer { xsd:boolean }?,
  attribute Locked { xsd:boolean }?,
  attribute HasViewState { xsd:boolean }?,
  attribute ViewState { xsd:boolean }?,
  attribute HasExportState { xsd:boolean }?,
  attribute ExportState { xsd:boolean }?,
  attribute HasPrintState { xsd:boolean }?,
  attribute PrintState { xsd:boolean }?,
  attribute Id { xsd:int }?,
(
  GraphicLayer_Object*
)
}

LayerCompOption_Object = element LayerCompOption {
  attribute AppliedLayerComp { xsd:int }?
}

EPS_Object = element EPS {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute Space { xsd:string }?,
  attribute ActualPpi { list { xsd:double ,xsd:double } }?,
  attribute EffectivePpi { list { xsd:double ,xsd:double } }?,
  attribute GrayVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute RGBVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute CMYKVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?
)
}

WMF_Object = element WMF {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?
)
}

PICT_Object = element PICT {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextWrapPreference_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?
)
}

PDF_Object = element PDF {
  attribute Self { xsd:string },
  attribute Nonprinting { xsd:boolean }?,
  attribute GrayVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute RGBVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute CMYKVectorPolicy { PlacedVectorProfilePolicy_EnumValue }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextWrapPreference_Object?&
  PDFAttribute_Object?&
  MetadataPacketPreference_Object?&
  Link_Object*&
  ClippingPathSettings_Object?&
  GraphicLayerOption_Object?
)
}

PDFAttribute_Object = element PDFAttribute {
  attribute PageNumber { xsd:int }?,
  attribute PDFCrop { PDFCrop_EnumValue }?,
  attribute TransparentBackground { xsd:boolean }?
}

ImportedPage_Object = element ImportedPage {
  attribute Self { xsd:string },
  attribute PageNumber { xsd:int }?,
  attribute ImportedPageCrop { ImportedPageCropOptions_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute ImageTypeName { xsd:string }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Contents { text }?&
    element GraphicProxy { text }?&
    element ClippingPathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element GraphicBounds { RectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  MetadataPacketPreference_Object?&
  GraphicLayerOption_Object?&
  ClippingPathSettings_Object?&
  TextWrapPreference_Object?&
  PDFAttribute_Object?&
  Link_Object*
)
}

Rectangle_Object = element Rectangle {
  attribute Self { xsd:string },
  attribute StoryTitle { xsd:string }?,
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?),
  (Sound_Object*&
  Movie_Object*&
  Link_Object*&
  FormField_Object*&
  Button_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  ImportedPage_Object*)
)
}

GraphicLine_Object = element GraphicLine {
  attribute Self { xsd:string },
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?),
  (FormField_Object*&
  Button_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  ImportedPage_Object*)
)
}

TextFrame_Object = element TextFrame {
  attribute Self { xsd:string },
  attribute ParentStory { xsd:string }?,
  attribute PreviousTextFrame { xsd:string }?,
  attribute NextTextFrame { xsd:string }?,
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  (TextPath_Object*&
  GridDataInformation_Object?),
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  TextFramePreference_Object?&
  AnchoredObjectSetting_Object?&
  BaselineFrameGridOption_Object?&
  TextWrapPreference_Object?)
)
}

Polygon_Object = element Polygon {
  attribute Self { xsd:string },
  attribute StoryTitle { xsd:string }?,
  attribute ContentType { ContentType_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextPath_Object*,
  (TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  InCopyExportOption_Object?&
  FrameFittingOption_Object?),
  (Sound_Object*&
  Movie_Object*&
  Link_Object*&
  FormField_Object*&
  Button_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  ImportedPage_Object*)
)
}

Group_Object = element Group {
  attribute Self { xsd:string },
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TransparencySetting_Object?&
  StrokeTransparencySetting_Object?&
  FillTransparencySetting_Object?&
  ContentTransparencySetting_Object?&
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  ImportedPage_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*
)
}

EPSText_Object = element EPSText {
  attribute Self { xsd:string },
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element EPSTextData { text }?&
    element EPSTextAttributeBounds { UnitRectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?
)
}

FormField_Object = element FormField {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute VisibilityInPdf { VisibilityInPdf_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  Behavior_Object*&
  GotoFirstPageBehavior_Object*&
  GotoLastPageBehavior_Object*&
  GotoNextPageBehavior_Object*&
  GotoPreviousPageBehavior_Object*&
  GotoNextViewBehavior_Object*&
  GotoPreviousViewBehavior_Object*&
  GotoURLBehavior_Object*&
  GotoAnchorBehavior_Object*&
  MovieBehavior_Object*&
  SoundBehavior_Object*&
  ShowHideFieldsBehavior_Object*&
  OpenFileBehavior_Object*&
  CloseWindowBehavior_Object*&
  QuitBehavior_Object*&
  ViewZoomBehavior_Object*&
  GotoPageBehavior_Object*
)
}

Behavior_Object = element Behavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoFirstPageBehavior_Object = element GotoFirstPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoLastPageBehavior_Object = element GotoLastPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoNextPageBehavior_Object = element GotoNextPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPreviousPageBehavior_Object = element GotoPreviousPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoNextViewBehavior_Object = element GotoNextViewBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPreviousViewBehavior_Object = element GotoPreviousViewBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoURLBehavior_Object = element GotoURLBehavior {
  attribute Self { xsd:string },
  attribute URL { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoAnchorBehavior_Object = element GotoAnchorBehavior {
  attribute Self { xsd:string },
  attribute AnchorName { xsd:string }?,
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute FilePath { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element AnchorItem { 
      (object_type, xsd:string ) |
      (long_type, xsd:int )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

MovieBehavior_Object = element MovieBehavior {
  attribute Self { xsd:string },
  attribute MovieItem { xsd:string }?,
  attribute Operation { PlayOperations_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

SoundBehavior_Object = element SoundBehavior {
  attribute Self { xsd:string },
  attribute SoundItem { xsd:string }?,
  attribute Operation { PlayOperations_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ShowHideFieldsBehavior_Object = element ShowHideFieldsBehavior {
  attribute Self { xsd:string },
  attribute FieldsToHide { list { xsd:string * } }?,
  attribute FieldsToShow { list { xsd:string * } }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

OpenFileBehavior_Object = element OpenFileBehavior {
  attribute Self { xsd:string },
  attribute FilePath { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

CloseWindowBehavior_Object = element CloseWindowBehavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

QuitBehavior_Object = element QuitBehavior {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ViewZoomBehavior_Object = element ViewZoomBehavior {
  attribute Self { xsd:string },
  attribute ViewZoomStyle { ViewZoomStyle_EnumValue }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

GotoPageBehavior_Object = element GotoPageBehavior {
  attribute Self { xsd:string },
  attribute ZoomSetting { GoToZoomOptions_EnumValue }?,
  attribute PageNumber { xsd:int }?,
  attribute Name { xsd:string }?,
  attribute EnableBehavior { xsd:boolean }?,
  attribute BehaviorEvent { BehaviorEvents_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Button_Object = element Button {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  attribute VisibilityInPdf { VisibilityInPdf_EnumValue }?,
  attribute AllowOverrides { xsd:boolean }?,
  attribute AppliedObjectStyle { xsd:string }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute StrokeWeight { xsd:double }?,
  attribute MiterLimit { xsd:double {minInclusive="1" maxInclusive="500"} }?,
  attribute EndCap { EndCap_EnumValue }?,
  attribute EndJoin { EndJoin_EnumValue }?,
  attribute StrokeType { xsd:string }?,
  attribute StrokeCornerAdjustment { StrokeCornerAdjustment_EnumValue }?,
  attribute StrokeDashAndGap { list { xsd:double * } }?,
  attribute LeftLineEnd { ArrowHead_EnumValue }?,
  attribute RightLineEnd { ArrowHead_EnumValue }?,
  attribute StrokeColor { xsd:string }?,
  attribute StrokeTint { xsd:double }?,
  attribute CornerRadius { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute GapColor { xsd:string }?,
  attribute GapTint { xsd:double }?,
  attribute OverprintGap { xsd:boolean }?,
  attribute StrokeAlignment { StrokeAlignment_EnumValue }?,
  attribute Nonprinting { xsd:boolean }?,
  attribute ItemLayer { xsd:string }?,
  attribute Locked { xsd:boolean }?,
  attribute LocalDisplaySetting { DisplaySettingOptions_EnumValue }?,
  attribute GradientFillHiliteLength { xsd:double }?,
  attribute GradientFillHiliteAngle { xsd:double }?,
  attribute GradientStrokeHiliteLength { xsd:double }?,
  attribute GradientStrokeHiliteAngle { xsd:double }?,
  attribute CornerOption { CornerOptions_EnumValue }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  element Properties {
    element PathBoundingBox { RectangleBoundsType_TypeDef }?&
    element PathGeometry { element GeometryPathType { GeometryPathType_TypeDef }* 
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  AnchoredObjectSetting_Object?&
  TextWrapPreference_Object?&
  State_Object*&
  Behavior_Object*&
  GotoFirstPageBehavior_Object*&
  GotoLastPageBehavior_Object*&
  GotoNextPageBehavior_Object*&
  GotoPreviousPageBehavior_Object*&
  GotoNextViewBehavior_Object*&
  GotoPreviousViewBehavior_Object*&
  GotoURLBehavior_Object*&
  GotoAnchorBehavior_Object*&
  MovieBehavior_Object*&
  SoundBehavior_Object*&
  ShowHideFieldsBehavior_Object*&
  OpenFileBehavior_Object*&
  CloseWindowBehavior_Object*&
  QuitBehavior_Object*&
  ViewZoomBehavior_Object*&
  GotoPageBehavior_Object*
)
}

State_Object = element State {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Active { xsd:boolean }?,
  attribute Enabled { xsd:boolean }?,
  attribute Statetype { StateTypes_EnumValue }?,
(
  FormField_Object*&
  Button_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Graphic_Object*&
  ImportedPage_Object*&
  Image_Object*&
  EPS_Object*&
  WMF_Object*&
  PICT_Object*&
  PDF_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*
)
}

Spread_Object = element Spread {
  attribute Self { xsd:string },
  attribute FlattenerOverride { SpreadFlattenerLevel_EnumValue }?,
  attribute ShowMasterItems { xsd:boolean }?,
  attribute PageCount { xsd:int }?,
  attribute BindingLocation { xsd:int }?,
  attribute AllowPageShuffle { xsd:boolean }?,
  attribute ItemTransform { TransformationMatrixType_TypeDef }?,
  attribute PageTransitionType { PageTransitionTypeOptions_EnumValue }?,
  attribute PageTransitionDirection { PageTransitionDirectionOptions_EnumValue }?,
  attribute PageTransitionDuration { PageTransitionDurationOptions_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  FlattenerPreference_Object?&
  Page_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  TextFrame_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*
)
}

FlattenerPreference_Object = element FlattenerPreference {
  attribute LineArtAndTextResolution { xsd:double }?,
  attribute GradientAndMeshResolution { xsd:double }?,
  attribute ClipComplexRegions { xsd:boolean }?,
  attribute ConvertAllStrokesToOutlines { xsd:boolean }?,
  attribute ConvertAllTextToOutlines { xsd:boolean }?,
  element Properties {
    element RasterVectorBalance { 
      (enum_type, FlattenerLevel_EnumValue ) |
      (double_type, xsd:double {minInclusive="0" maxInclusive="100"} )
    }?
  }
  ?
}

Section_Object = element Section {
  attribute Self { xsd:string },
  attribute Length { xsd:int }?,
  attribute Name { xsd:string }?,
  attribute ContinueNumbering { xsd:boolean }?,
  attribute IncludeSectionPrefix { xsd:boolean }?,
  attribute PageNumberStart { xsd:int {minInclusive="1" maxInclusive="999999"} }?,
  attribute Marker { xsd:string }?,
  attribute PageStart { xsd:string }?,
  attribute SectionPrefix { xsd:string }?,
  element Properties {
    element PageNumberStyle { 
      (enum_type, PageNumberStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

DocumentUser_Object = element DocumentUser {
  attribute Self { xsd:string },
  attribute UserName { xsd:string },
  element Properties {
    element UserColor { InCopyUIColorType_TypeDef }?
  }
  ?
}

CrossReferenceFormat_Object = element CrossReferenceFormat {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  BuildingBlock_Object*
)
}

BuildingBlock_Object = element BuildingBlock {
  attribute Self { xsd:string },
  attribute BlockType { BuildingBlockTypes_EnumValue },
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute CustomText { xsd:string }?,
  attribute AppliedDelimiter { xsd:string }?,
  attribute IncludeDelimiter { xsd:boolean }?
}

Index_Object = element Index {
  attribute Self { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Topic_Object*
)
}

Topic_Object = element Topic {
  attribute Self { xsd:string },
  attribute SortOrder { xsd:string }?,
  attribute Name { xsd:string },
(
  CrossReference_Object*&
  Topic_Object*
)
}

CrossReference_Object = element CrossReference {
  attribute Self { xsd:string },
  attribute ReferencedTopic { xsd:string }?,
  attribute CrossReferenceType { CrossReferenceType_EnumValue }?,
  attribute CustomTypeString { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

XmlStory_Object = element XmlStory {
  attribute Self { xsd:string },
  attribute AppliedTOCStyle { xsd:string }?,
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute TrackChanges { xsd:boolean }?,
  attribute StoryTitle { xsd:string }?,
  attribute AppliedNamedGrid { xsd:string }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyFlag { xsd:int }?,
  attribute RubyString { xsd:string }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element OpenTypeFeatures { list_type, element ListItem { 
        list_type, 
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        },
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        }
      }* 
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?&
    element ExcelImportPreferences { list_type, element ListItem { 
        (enum_type, AlignmentStyleOptions_EnumValue ) |
        (long_type, xsd:int ) |
        (bool_type, xsd:boolean ) |
        (enum_type, TableFormattingOptions_EnumValue ) |
        (string_type, xsd:string )
      }* 
    }?&
    element WordRTFImportPreferences { list_type, element ListItem { 
        (bool_type, xsd:boolean ) |
        (enum_type, ConvertPageBreaks_EnumValue ) |
        (enum_type, ConvertTablesOptions_EnumValue ) |
        (enum_type, ResolveStyleClash_EnumValue ) |
        (long_type, xsd:int )
      }* 
    }?&
    element TextImportPreferences { list_type, element ListItem { 
        (bool_type, xsd:boolean ) |
        (long_type, xsd:int ) |
        (enum_type, TextImportCharacterSet_EnumValue ) |
        (enum_type, ImportPlatform_EnumValue ) |
        (short_type, xsd:short )
      }* 
    }?&
    element StyleMappingPreferences { list_type, 
      element ListItem { 
        list_type, element ListItem { string_type, xsd:string }* 
      },
      element ListItem { 
        list_type, element ListItem { string_type, xsd:string }* 
      }
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Table_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  StoryPreference_Object?&
  GridDataInformation_Object?&
  Footnote_Object*&
  Note_Object*&
  TextVariableInstance_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  XMLElement_Object*&
  XMLComment_Object*&
  XMLInstruction_Object*&
  DTD_Object*&
  MetadataPacketPreference_Object?
)
}

Table_Object = element Table {
  attribute Self { xsd:string },
  attribute HeaderRowCount { xsd:int {minInclusive="0" maxInclusive="25"} }?,
  attribute FooterRowCount { xsd:int {minInclusive="0" maxInclusive="25"} }?,
  attribute TopBorderStrokeWeight { xsd:double }?,
  attribute TopBorderStrokeType { xsd:string }?,
  attribute TopBorderStrokeColor { xsd:string }?,
  attribute TopBorderStrokeTint { xsd:double }?,
  attribute TopBorderStrokeOverprint { xsd:boolean }?,
  attribute TopBorderStrokeGapColor { xsd:string }?,
  attribute TopBorderStrokeGapTint { xsd:double }?,
  attribute TopBorderStrokeGapOverprint { xsd:boolean }?,
  attribute LeftBorderStrokeWeight { xsd:double }?,
  attribute LeftBorderStrokeType { xsd:string }?,
  attribute LeftBorderStrokeColor { xsd:string }?,
  attribute LeftBorderStrokeTint { xsd:double }?,
  attribute LeftBorderStrokeOverprint { xsd:boolean }?,
  attribute LeftBorderStrokeGapColor { xsd:string }?,
  attribute LeftBorderStrokeGapTint { xsd:double }?,
  attribute LeftBorderStrokeGapOverprint { xsd:boolean }?,
  attribute BottomBorderStrokeWeight { xsd:double }?,
  attribute BottomBorderStrokeType { xsd:string }?,
  attribute BottomBorderStrokeColor { xsd:string }?,
  attribute BottomBorderStrokeTint { xsd:double }?,
  attribute BottomBorderStrokeOverprint { xsd:boolean }?,
  attribute BottomBorderStrokeGapColor { xsd:string }?,
  attribute BottomBorderStrokeGapTint { xsd:double }?,
  attribute BottomBorderStrokeGapOverprint { xsd:boolean }?,
  attribute RightBorderStrokeWeight { xsd:double }?,
  attribute RightBorderStrokeType { xsd:string }?,
  attribute RightBorderStrokeColor { xsd:string }?,
  attribute RightBorderStrokeTint { xsd:double }?,
  attribute RightBorderStrokeOverprint { xsd:boolean }?,
  attribute RightBorderStrokeGapColor { xsd:string }?,
  attribute RightBorderStrokeGapTint { xsd:double }?,
  attribute RightBorderStrokeGapOverprint { xsd:boolean }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute SkipFirstAlternatingStrokeRows { xsd:int }?,
  attribute SkipLastAlternatingStrokeRows { xsd:int }?,
  attribute StartRowStrokeCount { xsd:int }?,
  attribute StartRowStrokeColor { xsd:string }?,
  attribute StartRowStrokeWeight { xsd:double }?,
  attribute StartRowStrokeType { xsd:string }?,
  attribute StartRowStrokeTint { xsd:double }?,
  attribute StartRowStrokeGapOverprint { xsd:boolean }?,
  attribute StartRowStrokeGapColor { xsd:string }?,
  attribute StartRowStrokeGapTint { xsd:double }?,
  attribute StartRowStrokeOverprint { xsd:boolean }?,
  attribute EndRowStrokeCount { xsd:int }?,
  attribute EndRowStrokeColor { xsd:string }?,
  attribute EndRowStrokeWeight { xsd:double }?,
  attribute EndRowStrokeType { xsd:string }?,
  attribute EndRowStrokeTint { xsd:double }?,
  attribute EndRowStrokeOverprint { xsd:boolean }?,
  attribute EndRowStrokeGapColor { xsd:string }?,
  attribute EndRowStrokeGapTint { xsd:double }?,
  attribute EndRowStrokeGapOverprint { xsd:boolean }?,
  attribute SkipFirstAlternatingStrokeColumns { xsd:int }?,
  attribute SkipLastAlternatingStrokeColumns { xsd:int }?,
  attribute StartColumnStrokeCount { xsd:int }?,
  attribute StartColumnStrokeColor { xsd:string }?,
  attribute StartColumnStrokeWeight { xsd:double }?,
  attribute StartColumnStrokeType { xsd:string }?,
  attribute StartColumnStrokeTint { xsd:double }?,
  attribute StartColumnStrokeOverprint { xsd:boolean }?,
  attribute StartColumnStrokeGapColor { xsd:string }?,
  attribute StartColumnStrokeGapTint { xsd:double }?,
  attribute StartColumnStrokeGapOverprint { xsd:boolean }?,
  attribute EndColumnStrokeCount { xsd:int }?,
  attribute EndColumnStrokeColor { xsd:string }?,
  attribute EndColumnStrokeWeight { xsd:double }?,
  attribute EndColumnLineStyle { xsd:string }?,
  attribute EndColumnStrokeTint { xsd:double }?,
  attribute EndColumnStrokeOverprint { xsd:boolean }?,
  attribute EndColumnStrokeGapColor { xsd:string }?,
  attribute EndColumnStrokeGapTint { xsd:double }?,
  attribute EndColumnStrokeGapOverprint { xsd:boolean }?,
  attribute ColumnFillsPriority { xsd:boolean }?,
  attribute SkipFirstAlternatingFillRows { xsd:int }?,
  attribute SkipLastAlternatingFillRows { xsd:int }?,
  attribute StartRowFillColor { xsd:string }?,
  attribute StartRowFillCount { xsd:int }?,
  attribute StartRowFillTint { xsd:double }?,
  attribute StartRowFillOverprint { xsd:boolean }?,
  attribute EndRowFillCount { xsd:int }?,
  attribute EndRowFillColor { xsd:string }?,
  attribute EndRowFillTint { xsd:double }?,
  attribute EndRowFillOverprint { xsd:boolean }?,
  attribute SkipFirstAlternatingFillColumns { xsd:int }?,
  attribute SkipLastAlternatingFillColumns { xsd:int }?,
  attribute StartColumnFillCount { xsd:int }?,
  attribute StartColumnFillColor { xsd:string }?,
  attribute StartColumnFillTint { xsd:double }?,
  attribute StartColumnFillOverprint { xsd:boolean }?,
  attribute EndColumnFillCount { xsd:int }?,
  attribute EndColumnFillColor { xsd:string }?,
  attribute EndColumnFillTint { xsd:double }?,
  attribute EndColumnFillOverprint { xsd:boolean }?,
  attribute BreakHeaders { HeaderFooterBreakTypes_EnumValue }?,
  attribute BreakFooters { HeaderFooterBreakTypes_EnumValue }?,
  attribute SkipFirstHeader { xsd:boolean }?,
  attribute SkipLastFooter { xsd:boolean }?,
  attribute StrokeOrder { StrokeOrderTypes_EnumValue }?,
  attribute DefaultRowStrokeWeight { xsd:double }?,
  attribute DefaultRowStrokeType { xsd:string }?,
  attribute DefaultRowStrokeColor { xsd:string }?,
  attribute DefaultRowStrokeTint { xsd:double }?,
  attribute DefaultRowStrokeOverprint { xsd:boolean }?,
  attribute DefaultRowStrokeGapColor { xsd:string }?,
  attribute DefaultRowStrokeGapTint { xsd:double }?,
  attribute DefaultRowStrokeGapOverprint { xsd:boolean }?,
  attribute DefaultColumnStrokeWeight { xsd:double }?,
  attribute DefaultColumnStrokeType { xsd:string }?,
  attribute DefaultColumnStrokeColor { xsd:string }?,
  attribute DefaultColumnStrokeTint { xsd:double }?,
  attribute DefaultColumnStrokeOverprint { xsd:boolean }?,
  attribute DefaultColumnStrokeGapColor { xsd:string }?,
  attribute DefaultColumnStrokeGapTint { xsd:double }?,
  attribute DefaultColumnStrokeGapOverprint { xsd:boolean }?,
  attribute BodyRowCount { xsd:int {minInclusive="1" maxInclusive="10000"} }?,
  attribute ColumnCount { xsd:int {minInclusive="1" maxInclusive="200"} }?,
  attribute AppliedTableStyle { xsd:string }?,
  attribute TableDirection { TableDirectionOptions_EnumValue }?,
  attribute DisplayCollapsed { xsd:boolean }?,
  attribute DisplayOrder { DisplayOrderOptions_EnumValue }?,
  attribute TopInset { xsd:double }?,
  attribute LeftInset { xsd:double }?,
  attribute BottomInset { xsd:double }?,
  attribute RightInset { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute TopLeftDiagonalLine { xsd:boolean }?,
  attribute TopRightDiagonalLine { xsd:boolean }?,
  attribute DiagonalLineInFront { xsd:boolean }?,
  attribute DiagonalLineStrokeWeight { xsd:double }?,
  attribute DiagonalLineStrokeType { xsd:string }?,
  attribute DiagonalLineStrokeColor { xsd:string }?,
  attribute DiagonalLineStrokeTint { xsd:double }?,
  attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
  attribute DiagonalLineStrokeGapColor { xsd:string }?,
  attribute DiagonalLineStrokeGapTint { xsd:double }?,
  attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
  attribute ClipContentToCell { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute ParagraphSpacingLimit { xsd:double }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute RotationAngle { xsd:double }?,
  attribute WritingDirection { xsd:boolean }?,
  attribute MinimumHeight { xsd:double }?,
  attribute MaximumHeight { xsd:double }?,
  attribute KeepWithNextRow { xsd:boolean }?,
  attribute StartRow { StartParagraph_EnumValue }?,
  attribute AutoGrow { xsd:boolean }?,
  attribute SingleRowHeight { xsd:double }?,
  attribute SingleColumnWidth { xsd:double }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Cell_Object*&
  Row_Object*&
  Column_Object*
)
}

Cell_Object = element Cell {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute RowSpan { xsd:int }?,
  attribute ColumnSpan { xsd:int }?,
  attribute TopInset { xsd:double }?,
  attribute LeftInset { xsd:double }?,
  attribute BottomInset { xsd:double }?,
  attribute RightInset { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute TopLeftDiagonalLine { xsd:boolean }?,
  attribute TopRightDiagonalLine { xsd:boolean }?,
  attribute DiagonalLineInFront { xsd:boolean }?,
  attribute DiagonalLineStrokeWeight { xsd:double }?,
  attribute DiagonalLineStrokeType { xsd:string }?,
  attribute DiagonalLineStrokeColor { xsd:string }?,
  attribute DiagonalLineStrokeTint { xsd:double }?,
  attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
  attribute DiagonalLineStrokeGapColor { xsd:string }?,
  attribute DiagonalLineStrokeGapTint { xsd:double }?,
  attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
  attribute ClipContentToCell { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute ParagraphSpacingLimit { xsd:double }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute RotationAngle { xsd:double }?,
  attribute LeftEdgeStrokeWeight { xsd:double }?,
  attribute LeftEdgeStrokeType { xsd:string }?,
  attribute LeftEdgeStrokeColor { xsd:string }?,
  attribute LeftEdgeStrokeTint { xsd:double }?,
  attribute LeftEdgeStrokeOverprint { xsd:boolean }?,
  attribute LeftEdgeStrokeGapColor { xsd:string }?,
  attribute LeftEdgeStrokeGapTint { xsd:double }?,
  attribute LeftEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute TopEdgeStrokeWeight { xsd:double }?,
  attribute TopEdgeStrokeType { xsd:string }?,
  attribute TopEdgeStrokeColor { xsd:string }?,
  attribute TopEdgeStrokeTint { xsd:double }?,
  attribute TopEdgeStrokeOverprint { xsd:boolean }?,
  attribute TopEdgeStrokeGapColor { xsd:string }?,
  attribute TopEdgeStrokeGapTint { xsd:double }?,
  attribute TopEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute RightEdgeStrokeWeight { xsd:double }?,
  attribute RightEdgeStrokeType { xsd:string }?,
  attribute RightEdgeStrokeColor { xsd:string }?,
  attribute RightEdgeStrokeTint { xsd:double }?,
  attribute RightEdgeStrokeOverprint { xsd:boolean }?,
  attribute RightEdgeStrokeGapColor { xsd:string }?,
  attribute RightEdgeStrokeGapTint { xsd:double }?,
  attribute RightEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute BottomEdgeStrokeWeight { xsd:double }?,
  attribute BottomEdgeStrokeType { xsd:string }?,
  attribute BottomEdgeStrokeColor { xsd:string }?,
  attribute BottomEdgeStrokeTint { xsd:double }?,
  attribute BottomEdgeStrokeOverprint { xsd:boolean }?,
  attribute BottomEdgeStrokeGapColor { xsd:string }?,
  attribute BottomEdgeStrokeGapTint { xsd:double }?,
  attribute BottomEdgeStrokeGapOverprint { xsd:boolean }?,
  attribute InnerRowStrokeWeight { xsd:double }?,
  attribute InnerRowStrokeType { xsd:string }?,
  attribute InnerRowStrokeColor { xsd:string }?,
  attribute InnerRowStrokeTint { xsd:double }?,
  attribute InnerRowStrokeOverprint { xsd:boolean }?,
  attribute InnerRowStrokeGapColor { xsd:string }?,
  attribute InnerRowStrokeGapTint { xsd:double }?,
  attribute InnerRowStrokeGapOverprint { xsd:boolean }?,
  attribute InnerColumnStrokeWeight { xsd:double }?,
  attribute InnerColumnStrokeType { xsd:string }?,
  attribute InnerColumnStrokeColor { xsd:string }?,
  attribute InnerColumnStrokeTint { xsd:double }?,
  attribute InnerColumnStrokeOverprint { xsd:boolean }?,
  attribute InnerColumnStrokeGapColor { xsd:string }?,
  attribute InnerColumnStrokeGapTint { xsd:double }?,
  attribute InnerColumnStrokeGapOverprint { xsd:boolean }?,
  attribute TopEdgeStrokePriority { xsd:int }?,
  attribute LeftEdgeStrokePriority { xsd:int }?,
  attribute BottomEdgeStrokePriority { xsd:int }?,
  attribute RightEdgeStrokePriority { xsd:int }?,
  attribute AppliedCellStyle { xsd:string }?,
  attribute WritingDirection { xsd:boolean }?,
  attribute AppliedCellStylePriority { xsd:int }?,
  element Properties {
    element AllCellGradientAttrList { list_type, element ListItem { 
        (double_type, xsd:double ) |
        (list_type, 
        element ListItem { unit_type, xsd:double },
        element ListItem { unit_type, xsd:double })
      }* 
    }?&
    element Label { list_type, element ListItem { 
        list_type, 
        element ListItem { string_type, xsd:string },
        element ListItem { string_type, xsd:string }
      }* 
    }?
  }
  ?
  ,
(
  TextVariableInstance_Object*&
  Table_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  Change_Object*&
  Note_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HiddenText_Object*
)
}

Change_Object = element Change {
  attribute Date { xsd:dateTime }?,
  attribute ChangeType { ChangeTypes_EnumValue }?,
  attribute UserName { xsd:string }?,
  attribute AppliedDocumentUser { xsd:string }?,
(
  Footnote_Object*&
  Table_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  DTD_Object*&
  XMLElement_Object*&
  XMLInstruction_Object1*&
  XMLComment_Object*&
  TextVariableInstance_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  HyperlinkTextSource_Object*&
  CrossReferenceSource_Object*&
  Note_Object*&
  HiddenText_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

XMLInstruction_Object1 = element XMLInstruction {
  attribute Self { xsd:string },
  attribute Target { xsd:string },
  attribute Data { xsd:string }?
}

HyperlinkTextDestination_Object = element HyperlinkTextDestination {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ParagraphDestination_Object = element ParagraphDestination {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

HyperlinkTextSource_Object = element HyperlinkTextSource {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Hidden { xsd:boolean }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Note_Object*&
  Table_Object*&
  TextVariableInstance_Object*&
  Footnote_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  Change_Object*&
  HiddenText_Object*&
  XMLElement_Object*&
  XMLInstruction_Object*&
  XMLComment_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

CrossReferenceSource_Object = element CrossReferenceSource {
  attribute Self { xsd:string },
  attribute AppliedFormat { xsd:string }?,
  attribute Name { xsd:string }?,
  attribute Hidden { xsd:boolean }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

HiddenText_Object = element HiddenText {
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  TextVariableInstance_Object*&
  Footnote_Object*&
  Table_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  Note_Object*&
  Change_Object*&
  DTD_Object*&
  XMLElement_Object*&
  XMLInstruction_Object1*&
  XMLComment_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  HyperlinkTextSource_Object*&
  CrossReferenceSource_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

Row_Object = element Row {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute TopInset { xsd:double }?,
  attribute LeftInset { xsd:double }?,
  attribute BottomInset { xsd:double }?,
  attribute RightInset { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute TopLeftDiagonalLine { xsd:boolean }?,
  attribute TopRightDiagonalLine { xsd:boolean }?,
  attribute DiagonalLineInFront { xsd:boolean }?,
  attribute DiagonalLineStrokeWeight { xsd:double }?,
  attribute DiagonalLineStrokeType { xsd:string }?,
  attribute DiagonalLineStrokeColor { xsd:string }?,
  attribute DiagonalLineStrokeTint { xsd:double }?,
  attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
  attribute DiagonalLineStrokeGapColor { xsd:string }?,
  attribute DiagonalLineStrokeGapTint { xsd:double }?,
  attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
  attribute ClipContentToCell { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute ParagraphSpacingLimit { xsd:double }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute RotationAngle { xsd:double }?,
  attribute WritingDirection { xsd:boolean }?,
  attribute MinimumHeight { xsd:double }?,
  attribute MaximumHeight { xsd:double }?,
  attribute KeepWithNextRow { xsd:boolean }?,
  attribute StartRow { StartParagraph_EnumValue }?,
  attribute AutoGrow { xsd:boolean }?,
  attribute SingleRowHeight { xsd:double }?
}

Column_Object = element Column {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute TopInset { xsd:double }?,
  attribute LeftInset { xsd:double }?,
  attribute BottomInset { xsd:double }?,
  attribute RightInset { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute FillTint { xsd:double }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute TopLeftDiagonalLine { xsd:boolean }?,
  attribute TopRightDiagonalLine { xsd:boolean }?,
  attribute DiagonalLineInFront { xsd:boolean }?,
  attribute DiagonalLineStrokeWeight { xsd:double }?,
  attribute DiagonalLineStrokeType { xsd:string }?,
  attribute DiagonalLineStrokeColor { xsd:string }?,
  attribute DiagonalLineStrokeTint { xsd:double }?,
  attribute DiagonalLineStrokeOverprint { xsd:boolean }?,
  attribute DiagonalLineStrokeGapColor { xsd:string }?,
  attribute DiagonalLineStrokeGapTint { xsd:double }?,
  attribute DiagonalLineStrokeGapOverprint { xsd:boolean }?,
  attribute ClipContentToCell { xsd:boolean }?,
  attribute FirstBaselineOffset { FirstBaseline_EnumValue }?,
  attribute VerticalJustification { VerticalJustification_EnumValue }?,
  attribute ParagraphSpacingLimit { xsd:double }?,
  attribute MinimumFirstBaselineOffset { xsd:double {minInclusive="0" maxInclusive="8640"} }?,
  attribute RotationAngle { xsd:double }?,
  attribute WritingDirection { xsd:boolean }?,
  attribute SingleColumnWidth { xsd:double }?
}

Footnote_Object = element Footnote {
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Table_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  TextVariableInstance_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HiddenText_Object*
)
}

Note_Object = element Note {
  attribute Collapsed { xsd:boolean }?,
  attribute CreationDate { xsd:dateTime }?,
  attribute ModificationDate { xsd:dateTime }?,
  attribute UserName { xsd:string }?,
  attribute AppliedDocumentUser { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Footnote_Object*&
  TextVariableInstance_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  Table_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  HiddenText_Object*
)
}

TextVariableInstance_Object = element TextVariableInstance {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute ResultText { xsd:string }?,
  attribute AssociatedTextVariable { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

ParagraphStyleRange_Object = element ParagraphStyleRange {
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute KerningValue { xsd:double }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute AppliedConditions { list { xsd:string * } }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyFlag { xsd:int }?,
  attribute RubyString { xsd:string }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element CustomGlyph { 
      (long_type, xsd:int ) |
      (string_type, xsd:string )
    }?&
    element OpenTypeFeatures { list_type, element ListItem { 
        list_type, 
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        },
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        }
      }* 
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?
  }
  ?
  ,
(
  CharacterStyleRange_Object*&
  Note_Object*&
  Table_Object*&
  TextVariableInstance_Object*&
  Footnote_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  Change_Object*&
  XMLElement_Object*&
  XMLComment_Object*&
  XMLInstruction_Object*&
  DTD_Object*&
  HiddenText_Object*&
  HyperlinkTextSource_Object*&
  CrossReferenceSource_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

CharacterStyleRange_Object = element CharacterStyleRange {
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute KerningValue { xsd:double }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute AppliedConditions { list { xsd:string * } }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyFlag { xsd:int }?,
  attribute RubyString { xsd:string }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element CustomGlyph { 
      (long_type, xsd:int ) |
      (string_type, xsd:string )
    }?&
    element OpenTypeFeatures { list_type, element ListItem { 
        list_type, 
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        },
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        }
      }* 
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?
  }
  ?
  ,
(
  PageReference_Object*&
  Note_Object*&
  Table_Object*&
  TextVariableInstance_Object*&
  Footnote_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  Change_Object*&
  XMLElement_Object*&
  XMLComment_Object*&
  XMLInstruction_Object*&
  DTD_Object*&
  HiddenText_Object*&
  HyperlinkTextSource_Object*&
  CrossReferenceSource_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

PageReference_Object = element PageReference {
  attribute Self { xsd:string },
  attribute PageReferenceType { PageReferenceType_EnumValue }?,
  attribute PageNumberStyleOverride { xsd:string }?,
  attribute ReferencedTopic { xsd:string }?,
  element Properties {
    element PageReferenceLimit { 
      (object_type, xsd:string ) |
      (long_type, xsd:int )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

XMLElement_Object = element XMLElement {
  attribute Self { xsd:string },
  attribute MarkupTag { xsd:string }?,
  attribute XMLContent { xsd:string }?,
  attribute NoTextMarker { xsd:boolean }?,
(
  XMLAttribute_Object*&
  DTD_Object*&
  XMLElement_Object*&
  XMLComment_Object*&
  XMLInstruction_Object1*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  Table_Object*&
  Footnote_Object*&
  Note_Object*&
  TextVariableInstance_Object*&
  HyperlinkTextDestination_Object*&
  ParagraphDestination_Object*&
  Change_Object*&
  HiddenText_Object*&
  HyperlinkTextSource_Object*&
  CrossReferenceSource_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  Link_Object*&
  element Content {text}*&
  element Br {empty}*
)
}

XMLAttribute_Object = element XMLAttribute {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute Value { xsd:string }
}

XMLComment_Object = element XMLComment {
  attribute Self { xsd:string },
  attribute Value { xsd:string }?
}

XMLInstruction_Object = element XMLInstruction {
  attribute Self { xsd:string },
  attribute Target { xsd:string }?,
  attribute Data { xsd:string }?
}

DTD_Object = element DTD {
  attribute Self { xsd:string },
  element Properties {
    element Contents { 
      (string_type, xsd:string ) |
      (enum_type, SpecialCharacters_EnumValue ) |
      (object_type, xsd:string )
    }?
  }
  ?
}

Story_Object = element Story {
  attribute Self { xsd:string },
  attribute AppliedTOCStyle { xsd:string }?,
  attribute FirstLineIndent { xsd:double }?,
  attribute LeftIndent { xsd:double }?,
  attribute RightIndent { xsd:double }?,
  attribute SpaceBefore { xsd:double }?,
  attribute SpaceAfter { xsd:double }?,
  attribute Justification { Justification_EnumValue }?,
  attribute SingleWordJustification { SingleWordJustification_EnumValue }?,
  attribute AutoLeading { xsd:double }?,
  attribute DropCapLines { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute DropCapCharacters { xsd:short {minInclusive="0" maxInclusive="150"} }?,
  attribute KeepLinesTogether { xsd:boolean }?,
  attribute KeepAllLinesTogether { xsd:boolean }?,
  attribute KeepWithNext { xsd:short {minInclusive="0" maxInclusive="5"} }?,
  attribute KeepFirstLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute KeepLastLines { xsd:short {minInclusive="1" maxInclusive="50"} }?,
  attribute StartParagraph { StartParagraph_EnumValue }?,
  attribute Composer { xsd:string }?,
  attribute MinimumWordSpacing { xsd:double }?,
  attribute MaximumWordSpacing { xsd:double }?,
  attribute DesiredWordSpacing { xsd:double }?,
  attribute MinimumLetterSpacing { xsd:double }?,
  attribute MaximumLetterSpacing { xsd:double }?,
  attribute DesiredLetterSpacing { xsd:double }?,
  attribute MinimumGlyphScaling { xsd:double }?,
  attribute MaximumGlyphScaling { xsd:double }?,
  attribute DesiredGlyphScaling { xsd:double }?,
  attribute RuleAbove { xsd:boolean }?,
  attribute RuleAboveOverprint { xsd:boolean }?,
  attribute RuleAboveLineWeight { xsd:double }?,
  attribute RuleAboveTint { xsd:double }?,
  attribute RuleAboveOffset { xsd:double }?,
  attribute RuleAboveLeftIndent { xsd:double }?,
  attribute RuleAboveRightIndent { xsd:double }?,
  attribute RuleAboveWidth { RuleWidth_EnumValue }?,
  attribute RuleAboveGapTint { xsd:double }?,
  attribute RuleAboveGapOverprint { xsd:boolean }?,
  attribute RuleBelow { xsd:boolean }?,
  attribute RuleBelowLineWeight { xsd:double }?,
  attribute RuleBelowTint { xsd:double }?,
  attribute RuleBelowOffset { xsd:double }?,
  attribute RuleBelowLeftIndent { xsd:double }?,
  attribute RuleBelowRightIndent { xsd:double }?,
  attribute RuleBelowWidth { RuleWidth_EnumValue }?,
  attribute RuleBelowGapTint { xsd:double }?,
  attribute HyphenateCapitalizedWords { xsd:boolean }?,
  attribute Hyphenation { xsd:boolean }?,
  attribute HyphenateBeforeLast { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateAfterFirst { xsd:short {minInclusive="1" maxInclusive="15"} }?,
  attribute HyphenateWordsLongerThan { xsd:short {minInclusive="3" maxInclusive="25"} }?,
  attribute HyphenateLadderLimit { xsd:short {minInclusive="0" maxInclusive="25"} }?,
  attribute HyphenationZone { xsd:double }?,
  attribute HyphenWeight { xsd:short {minInclusive="0" maxInclusive="10"} }?,
  attribute LastLineIndent { xsd:double }?,
  attribute HyphenateLastWord { xsd:boolean }?,
  attribute RuleBelowOverprint { xsd:boolean }?,
  attribute RuleBelowGapOverprint { xsd:boolean }?,
  attribute DropcapDetail { xsd:int }?,
  attribute HyphenateAcrossColumns { xsd:boolean }?,
  attribute KeepRuleAboveInFrame { xsd:boolean }?,
  attribute IgnoreEdgeAlignment { xsd:boolean }?,
  attribute ParagraphDirection { ParagraphDirectionOptions_EnumValue }?,
  attribute ParagraphJustification { ParagraphJustificationOptions_EnumValue }?,
  attribute AppliedParagraphStyle { xsd:string }?,
  attribute AppliedCharacterStyle { xsd:string }?,
  attribute FontStyle { xsd:string }?,
  attribute PointSize { xsd:double }?,
  attribute KerningMethod { xsd:string }?,
  attribute Tracking { xsd:double }?,
  attribute Capitalization { Capitalization_EnumValue }?,
  attribute Position { Position_EnumValue }?,
  attribute Underline { xsd:boolean }?,
  attribute StrikeThru { xsd:boolean }?,
  attribute Ligatures { xsd:boolean }?,
  attribute NoBreak { xsd:boolean }?,
  attribute HorizontalScale { xsd:double }?,
  attribute VerticalScale { xsd:double }?,
  attribute BaselineShift { xsd:double }?,
  attribute Skew { xsd:double }?,
  attribute FillTint { xsd:double }?,
  attribute StrokeTint { xsd:double }?,
  attribute StrokeWeight { xsd:double }?,
  attribute OverprintStroke { xsd:boolean }?,
  attribute OverprintFill { xsd:boolean }?,
  attribute OTFFigureStyle { OTFFigureStyle_EnumValue }?,
  attribute OTFOrdinal { xsd:boolean }?,
  attribute OTFFraction { xsd:boolean }?,
  attribute OTFDiscretionaryLigature { xsd:boolean }?,
  attribute OTFTitling { xsd:boolean }?,
  attribute OTFContextualAlternate { xsd:boolean }?,
  attribute OTFSwash { xsd:boolean }?,
  attribute UnderlineTint { xsd:double }?,
  attribute UnderlineGapTint { xsd:double }?,
  attribute UnderlineOverprint { xsd:boolean }?,
  attribute UnderlineGapOverprint { xsd:boolean }?,
  attribute UnderlineOffset { xsd:double }?,
  attribute UnderlineWeight { xsd:double }?,
  attribute StrikeThroughTint { xsd:double }?,
  attribute StrikeThroughGapTint { xsd:double }?,
  attribute StrikeThroughOverprint { xsd:boolean }?,
  attribute StrikeThroughGapOverprint { xsd:boolean }?,
  attribute StrikeThroughOffset { xsd:double }?,
  attribute StrikeThroughWeight { xsd:double }?,
  attribute FillColor { xsd:string }?,
  attribute StrokeColor { xsd:string }?,
  attribute AppliedLanguage { xsd:string }?,
  attribute OTFSlashedZero { xsd:boolean }?,
  attribute OTFHistorical { xsd:boolean }?,
  attribute OTFStylisticSets { xsd:int }?,
  attribute GradientFillLength { xsd:double }?,
  attribute GradientFillAngle { xsd:double }?,
  attribute GradientStrokeLength { xsd:double }?,
  attribute GradientStrokeAngle { xsd:double }?,
  attribute GradientFillStart { UnitPointType_TypeDef }?,
  attribute GradientStrokeStart { UnitPointType_TypeDef }?,
  attribute OTFMark { xsd:boolean }?,
  attribute OTFLocale { xsd:boolean }?,
  attribute PositionalForm { PositionalForms_EnumValue }?,
  attribute MiterLimit { xsd:double {minInclusive="0" maxInclusive="1000"} }?,
  attribute StrokeAlignment { TextStrokeAlign_EnumValue }?,
  attribute EndJoin { OutlineJoin_EnumValue }?,
  attribute OTFOverlapSwash { xsd:boolean }?,
  attribute OTFStylisticAlternate { xsd:boolean }?,
  attribute OTFJustificationAlternate { xsd:boolean }?,
  attribute OTFStretchedAlternate { xsd:boolean }?,
  attribute CharacterDirection { CharacterDirectionOptions_EnumValue }?,
  attribute KeyboardDirection { CharacterDirectionOptions_EnumValue }?,
  attribute DigitsType { DigitsTypeOptions_EnumValue }?,
  attribute Kashidas { KashidasOptions_EnumValue }?,
  attribute DiacriticPosition { DiacriticPositionOptions_EnumValue }?,
  attribute XOffsetDiacritic { xsd:double }?,
  attribute YOffsetDiacritic { xsd:double }?,
  attribute ParagraphBreakType { ParagraphBreakTypes_EnumValue }?,
  attribute PageNumberType { PageNumberTypes_EnumValue }?,
  attribute TrackChanges { xsd:boolean }?,
  attribute StoryTitle { xsd:string }?,
  attribute AppliedNamedGrid { xsd:string }?,
  attribute CharacterAlignment { CharacterAlignment_EnumValue }?,
  attribute Tsume { xsd:double }?,
  attribute LeadingAki { xsd:double }?,
  attribute TrailingAki { xsd:double }?,
  attribute CharacterRotation { xsd:double }?,
  attribute Jidori { xsd:short }?,
  attribute ShataiMagnification { xsd:double }?,
  attribute ShataiDegreeAngle { xsd:double }?,
  attribute ShataiAdjustRotation { xsd:boolean }?,
  attribute ShataiAdjustTsume { xsd:boolean }?,
  attribute Tatechuyoko { xsd:boolean }?,
  attribute TatechuyokoXOffset { xsd:double }?,
  attribute TatechuyokoYOffset { xsd:double }?,
  attribute KentenTint { xsd:double }?,
  attribute KentenStrokeTint { xsd:double }?,
  attribute KentenWeight { xsd:double }?,
  attribute KentenOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute KentenOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute KentenKind { KentenCharacter_EnumValue }?,
  attribute KentenPlacement { xsd:double }?,
  attribute KentenAlignment { KentenAlignment_EnumValue }?,
  attribute KentenPosition { RubyKentenPosition_EnumValue }?,
  attribute KentenFontSize { xsd:double }?,
  attribute KentenXScale { xsd:double }?,
  attribute KentenYScale { xsd:double }?,
  attribute KentenCustomCharacter { xsd:string }?,
  attribute KentenCharacterSet { KentenCharacterSet_EnumValue }?,
  attribute RubyTint { xsd:double }?,
  attribute RubyWeight { xsd:double }?,
  attribute RubyOverprintFill { AdornmentOverprint_EnumValue }?,
  attribute RubyOverprintStroke { AdornmentOverprint_EnumValue }?,
  attribute RubyStrokeTint { xsd:double }?,
  attribute RubyFontSize { xsd:double }?,
  attribute RubyOpenTypePro { xsd:boolean }?,
  attribute RubyXScale { xsd:double }?,
  attribute RubyYScale { xsd:double }?,
  attribute RubyType { RubyTypes_EnumValue }?,
  attribute RubyAlignment { RubyAlignments_EnumValue }?,
  attribute RubyPosition { RubyKentenPosition_EnumValue }?,
  attribute RubyXOffset { xsd:double }?,
  attribute RubyYOffset { xsd:double }?,
  attribute RubyParentSpacing { RubyParentSpacing_EnumValue }?,
  attribute RubyAutoAlign { xsd:boolean }?,
  attribute RubyOverhang { xsd:boolean }?,
  attribute RubyAutoScaling { xsd:boolean }?,
  attribute RubyParentScalingPercent { xsd:double }?,
  attribute RubyParentOverhangAmount { RubyOverhang_EnumValue }?,
  attribute Warichu { xsd:boolean }?,
  attribute WarichuSize { xsd:double }?,
  attribute WarichuLines { xsd:short }?,
  attribute WarichuLineSpacing { xsd:double }?,
  attribute WarichuAlignment { WarichuAlignment_EnumValue }?,
  attribute WarichuCharsAfterBreak { xsd:short }?,
  attribute WarichuCharsBeforeBreak { xsd:short }?,
  attribute OTFProportionalMetrics { xsd:boolean }?,
  attribute OTFHVKana { xsd:boolean }?,
  attribute OTFRomanItalics { xsd:boolean }?,
  attribute ScaleAffectsLineHeight { xsd:boolean }?,
  attribute CjkGridTracking { xsd:boolean }?,
  attribute GlyphForm { AlternateGlyphForms_EnumValue }?,
  attribute RubyFlag { xsd:int }?,
  attribute RubyString { xsd:string }?,
  attribute RubyAutoTcyDigits { xsd:short }?,
  attribute RubyAutoTcyIncludeRoman { xsd:boolean }?,
  attribute RubyAutoTcyAutoScale { xsd:boolean }?,
  attribute GridAlignFirstLineOnly { xsd:boolean }?,
  attribute GridAlignment { GridAlignment_EnumValue }?,
  attribute GridGyoudori { xsd:short }?,
  attribute AutoTcy { xsd:short }?,
  attribute AutoTcyIncludeRoman { xsd:boolean }?,
  attribute KinsokuType { KinsokuType_EnumValue }?,
  attribute KinsokuHangType { KinsokuHangTypes_EnumValue }?,
  attribute BunriKinshi { xsd:boolean }?,
  attribute Rensuuji { xsd:boolean }?,
  attribute RotateSingleByteCharacters { xsd:boolean }?,
  attribute LeadingModel { LeadingModel_EnumValue }?,
  attribute ParagraphGyoudori { xsd:boolean }?,
  attribute TreatIdeographicSpaceAsSpace { xsd:boolean }?,
  attribute AllowArbitraryHyphenation { xsd:boolean }?,
  attribute BulletsAndNumberingListType { ListType_EnumValue }?,
  attribute NumberingExpression { xsd:string }?,
  attribute BulletsTextAfter { xsd:string }?,
  attribute NumberingLevel { xsd:int }?,
  attribute NumberingContinue { xsd:boolean }?,
  attribute NumberingStartAt { xsd:int }?,
  attribute NumberingApplyRestartPolicy { xsd:boolean }?,
  attribute BulletsAlignment { ListAlignment_EnumValue }?,
  attribute NumberingAlignment { ListAlignment_EnumValue }?,
  element Properties {
    element BalanceRaggedLines { 
      (bool_type, xsd:boolean ) |
      (enum_type, BalanceLinesStyle_EnumValue )
    }?&
    element RuleAboveColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleAboveType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RuleBelowType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AllNestedStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element Delimiter { 
            (string_type, xsd:string ) |
            (enum_type, NestedStyleDelimiters_EnumValue )
          }&
          element Repetition { long_type, xsd:int }&
          element Inclusive { bool_type, xsd:boolean })
      }* 
    }?&
    element AllLineStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element LineCount { long_type, xsd:int }&
          element RepeatLast { long_type, xsd:int })
      }* 
    }?&
    element AllGREPStyles { list_type, element ListItem { 
        record_type, 
        (
          element AppliedCharacterStyle { object_type, xsd:string }&
          element GrepExpression { string_type, xsd:string })
      }* 
    }?&
    element TabList { list_type, element ListItem { 
        record_type, 
        (
          element Alignment { enum_type, TabStopAlignment_EnumValue }&
          element AlignmentCharacter { string_type, xsd:string }&
          element Leader { string_type, xsd:string }&
          element Position { unit_type, xsd:double })
      }* 
    }?&
    element AppliedFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element Leading { 
      (unit_type, xsd:double ) |
      (enum_type, Leading_EnumValue )
    }?&
    element UnderlineColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element UnderlineType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughGapColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element StrikeThroughType { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element OpenTypeFeatures { list_type, element ListItem { 
        list_type, 
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        },
        element ListItem { 
          (string_type, xsd:string ) |
          (long_type, xsd:int )
        }
      }* 
    }?&
    element KentenFillColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenStrokeColor { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element KentenFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element RubyFill { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyStroke { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element RubyFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element KinsokuSet { 
      (object_type, xsd:string ) |
      (enum_type, KinsokuSet_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element Mojikumi { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, MojikumiTableDefaults_EnumValue )
    }?&
    element BulletChar { 
      attribute BulletCharacterType { BulletCharacterType_EnumValue },
      attribute BulletCharacterValue { xsd:int }
    }?&
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingCharacterStyle { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element AppliedNumberingList { 
      (object_type, xsd:string ) |
      (string_type, xsd:string )
    }?&
    element NumberingFormat { 
      (enum_type, NumberingStyle_EnumValue ) |
      (string_type, xsd:string )
    }?&
    element NumberingRestartPolicies { 
      attribute RestartPolicy { RestartPolicy_EnumValue },
      attribute LowerLevel { xsd:int },
      attribute UpperLevel { xsd:int }
    }?&
    element ExcelImportPreferences { list_type, element ListItem { 
        (enum_type, AlignmentStyleOptions_EnumValue ) |
        (long_type, xsd:int ) |
        (bool_type, xsd:boolean ) |
        (enum_type, TableFormattingOptions_EnumValue ) |
        (string_type, xsd:string )
      }* 
    }?&
    element WordRTFImportPreferences { list_type, element ListItem { 
        (bool_type, xsd:boolean ) |
        (enum_type, ConvertPageBreaks_EnumValue ) |
        (enum_type, ConvertTablesOptions_EnumValue ) |
        (enum_type, ResolveStyleClash_EnumValue ) |
        (long_type, xsd:int )
      }* 
    }?&
    element TextImportPreferences { list_type, element ListItem { 
        (bool_type, xsd:boolean ) |
        (long_type, xsd:int ) |
        (enum_type, TextImportCharacterSet_EnumValue ) |
        (enum_type, ImportPlatform_EnumValue ) |
        (short_type, xsd:short )
      }* 
    }?&
    element StyleMappingPreferences { list_type, 
      element ListItem { 
        list_type, element ListItem { string_type, xsd:string }* 
      },
      element ListItem { 
        list_type, element ListItem { string_type, xsd:string }* 
      }
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  StoryPreference_Object?,
  GridDataInformation_Object?,
  (MetadataPacketPreference_Object?&
  InCopyExportOption_Object?),
  (GaijiOwnedItemObject_Object*&
  ParagraphStyleRange_Object*&
  CharacterStyleRange_Object*&
  XMLElement_Object*&
  Footnote_Object*&
  TextVariableInstance_Object*&
  Table_Object*&
  Link_Object*&
  Change_Object*&
  Note_Object*&
  TextFrame_Object*&
  Oval_Object*&
  Rectangle_Object*&
  GraphicLine_Object*&
  Polygon_Object*&
  Group_Object*&
  EPSText_Object*&
  FormField_Object*&
  Button_Object*&
  HiddenText_Object*&
  element Content {text}*&
  element Br {empty}*)
)
}

GaijiOwnedItemObject_Object = element GaijiOwnedItemObject {
  attribute Self { xsd:string },
  element Properties {
    element GlyphletOwnedItem { 
      attribute Fontname { xsd:string },
      attribute Cid { xsd:int },
      attribute Gid { xsd:int },
      attribute UnicodeSingle { xsd:int },
      attribute UnicodeString { xsd:string }
    }?&
    element GlyphletOwnedItemKey { 
      attribute Ggid { xsd:int },
      attribute Uniquename { xsd:string }
    }?
  }
  ?
}

HyperlinkPageDestination_Object = element HyperlinkPageDestination {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute NameManually { xsd:boolean }?,
  attribute DestinationPage { xsd:string }?,
  attribute ViewSetting { HyperlinkDestinationPageSetting_EnumValue }?,
  attribute ViewPercentage { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element ViewBounds { UnitRectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

HyperlinkURLDestination_Object = element HyperlinkURLDestination {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute DestinationURL { xsd:string }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

HyperlinkExternalPageDestination_Object = element HyperlinkExternalPageDestination {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute DocumentPath { xsd:string }?,
  attribute DestinationPageIndex { xsd:int {minInclusive="1" maxInclusive="9999"} }?,
  attribute ViewSetting { HyperlinkDestinationPageSetting_EnumValue }?,
  attribute ViewPercentage { xsd:double {minInclusive="5" maxInclusive="4000"} }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element ViewBounds { UnitRectangleBoundsType_TypeDef }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

HyperlinkPageItemSource_Object = element HyperlinkPageItemSource {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute SourcePageItem { xsd:string },
  attribute Hidden { xsd:boolean }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

Hyperlink_Object = element Hyperlink {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Source { xsd:string },
  attribute Visible { xsd:boolean }?,
  attribute Highlight { HyperlinkAppearanceHighlight_EnumValue }?,
  attribute Width { HyperlinkAppearanceWidth_EnumValue }?,
  attribute BorderStyle { HyperlinkAppearanceStyle_EnumValue }?,
  attribute Hidden { xsd:boolean }?,
  attribute DestinationUniqueKey { xsd:int }?,
  element Properties {
    element BorderColor { InDesignUIColorType_TypeDef }?&
    element Destination { 
      (element FileName { string_type, xsd:string },
      element Volumn { string_type, xsd:string },
      element DirectoryId { long_type, xsd:int },
      element DataLinkClassId { long_type, xsd:int },
      element DestinationUid { long_type, xsd:int }) |
      (object_type, xsd:string )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

XMLExportMap_Object = element XMLExportMap {
  attribute Self { xsd:string },
  attribute MarkupTag { xsd:string },
  attribute MappedStyle { xsd:string },
  attribute IncludeMasterPageStories { xsd:boolean }?,
  attribute IncludePasteboardStories { xsd:boolean }?,
  attribute IncludeEmptyStories { xsd:boolean }?
}

XMLImportMap_Object = element XMLImportMap {
  attribute Self { xsd:string },
  attribute MarkupTag { xsd:string },
  attribute MappedStyle { xsd:string }
}

Bookmark_Object = element Bookmark {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Destination { xsd:string },
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  Bookmark_Object*
)
}

HyphenationException_Object = element HyphenationException {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute RemovedExceptions { list { xsd:string * } }?,
  attribute AddedExceptions { list { xsd:string * } }?
}

IndexingSortOption_Object = element IndexingSortOption {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute Include { xsd:boolean }?,
  attribute Priority { xsd:int }?,
  attribute HeaderType { (HeaderTypes_EnumValue ) |
    (NothingEnum_EnumValue )
  }?
}

ABullet_Object = element ABullet {
  attribute Self { xsd:string },
  attribute CharacterType { BulletCharacterType_EnumValue }?,
  attribute CharacterValue { xsd:int }?,
  element Properties {
    element BulletsFont { 
      (object_type, xsd:string ) |
      (string_type, xsd:string ) |
      (enum_type, AutoEnum_EnumValue )
    }?&
    element BulletsFontStyle { 
      (string_type, xsd:string ) |
      (enum_type, NothingEnum_EnumValue ) |
      (enum_type, AutoEnum_EnumValue )
    }?
  }
  ?
}

Assignment_Object = element Assignment {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute UserName { xsd:string }?,
  attribute ExportOptions { AssignmentExportOptions_EnumValue }?,
  attribute IncludeLinksWhenPackage { xsd:boolean }?,
  attribute FilePath { xsd:string },
  element Properties {
    element FrameColor { 
      (InDesignUIColorType_TypeDef ) |
      (enum_type, NothingEnum_EnumValue )
    }?&
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  AssignedStory_Object*
)
}

AssignedStory_Object = element AssignedStory {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute StoryReference { xsd:string }?,
  attribute FilePath { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
}

PreflightProfile_Object = element PreflightProfile {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Description { xsd:string }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  PreflightProfileRule_Object*&
  PreflightRuleInstance_Object*
)
}

PreflightProfileRule_Object = element PreflightProfileRule {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Id { xsd:string },
  attribute Description { xsd:string }?,
  attribute Flag { PreflightRuleFlag_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  RuleDataObject_Object*
)
}

RuleDataObject_Object = element RuleDataObject {
  attribute Self { xsd:string },
  attribute Name { xsd:string },
  attribute DataType { RuleDataType_EnumValue },
  attribute Id { xsd:string }?,
  element Properties {
    element DataValue { 
      (string_type, xsd:string ) |
      (double_type, xsd:double ) |
      (long_type, xsd:int ) |
      (short_type, xsd:short ) |
      (bool_type, xsd:boolean ) |
      (object_type, xsd:string ) |
      (list_type, element ListItem { 
        (string_type, xsd:string ) |
        (double_type, xsd:double ) |
        (long_type, xsd:int ) |
        (short_type, xsd:short ) |
        (bool_type, xsd:boolean ) |
        (object_type, xsd:string ) |
        (list_type, element PreflightRuleDataListType { PreflightRuleDataListType_TypeDef }* )
      }* )
    }
  }
}

PreflightRuleInstance_Object = element PreflightRuleInstance {
  attribute Self { xsd:string },
  attribute Name { xsd:string }?,
  attribute Id { xsd:string },
  attribute Description { xsd:string }?,
  attribute Flag { PreflightRuleFlag_EnumValue }?,
  element Properties {
    element Label { element KeyValuePair { KeyValuePair_TypeDef }* 
    }?
  }
  ?
  ,
(
  RuleDataObject_Object*
)
}

DataMergeImagePlaceholder_Object = element DataMergeImagePlaceholder {
  attribute Self { xsd:string },
  attribute Field { xsd:string },
  attribute PlaceholderPageItem { xsd:string }
}


}